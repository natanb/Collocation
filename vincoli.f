	SUBROUTINE VINBORDI(LA,IP,IWD,NP,NI,NCX,NCY)
	IMPLICIT DOUBLE PRECISION(A-H,O-Z)
	DIMENSION LA(1),IP(1),IWD(1)
        
	NIX=NCX + 1
	NIY=NCY + 1
	IX=MOD((NI-1),NIX) + 1
	IY=(NI-IX)/NIX + 1
C
C RIDEFINIZIONE DELLE COORDINATE DELL'INCOGNITA PER CERCARE LA CLASSE
C
	IX=MIN(IX,NCX)
	IY=MIN(IY,NCY)
	NNI=(IY-1)*NIX + IX
	NC=NNI-(IY-1)

	CALL CLASCOOR(NC,NX,NY,NCX)

	ID=MIN(NCX-NX,1)
	IA=MIN(NCY-NY,1)
	IS=MIN(NX-1,1)
	IB=MIN(NY-1,1)

	N1=NC - IB*NCX - IS
	N2=NC - IB*NCX + ID
	N3=NC + IA*NCX - IS
	N4=NC + IA*NCX + ID
	CALL VININTER(N1,N2,N3,N4,LA,IP,IWD,NCX,NCY,NP)
	RETURN
	END
C
C
C
	SUBROUTINE VININTER(N1,N2,N3,N4,LA,IP,IWD,NCX,NCY,NP)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION LA(1),IP(1),IWD(1)
C
C TESTA SE NELLE QUATTRO CLASSI NON CI SONO PUNTI
C
	NP=0
	K1=LA(N1)+1
	K2=LA(N1+1)
	IF(K2.GE.K1) THEN
	DO K=K1,K2
	NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF

	K1=LA(N2)+1
	K2=LA(N2+1)
	IF(K2.GE.K1) THEN
	DO K=K1,K2
	NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF

	K1=LA(N3)+1
	K2=LA(N3+1)
	IF(K2.GE.K1) THEN
	DO K=K1,K2
	NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF

	K1=LA(N4)+1
	K2=LA(N4+1)
	IF(K2.GE.K1) THEN
	DO K=K1,K2
	NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF
	
	IF(NP.GT.0) RETURN

C
C INIZIA IL CICLO PER LA RICERCA DEL PUNTO PIU' VICINO;
C AD OGNI ITERAZIONE LA RICERCA E' EFFETTUATA SULLE CLASSI DELLA CORNICE
C  
10	CONTINUE
        CALL CLASCOOR(N1,NX1,NY1,NCX)
        CALL CLASCOOR(N2,NX2,NY2,NCX)
	CALL CLASCOOR(N3,NX3,NY3,NCX)
	CALL CLASCOOR(N4,NX4,NY4,NCX)
C
C CALCOLA LO SPOSTAMENTO DELLA CLASSE N1 
C
   	NX1=NX1-MIN(NX1-1,1)
	NY1=NY1-MIN(NY1-1,1)
C        
C CALCOLA LO SPOSTAMENTO DELLA CLASSE N2
C
	NX2=NX2+MIN(NCX-NX2,1)
	NY2=NY2-MIN(NY2-1,1)
C
C CALCOLA LO SPOSTAMENTO DELLA CLASSE N3
C
	NX3=NX3-MIN(NX3-1,1)
	NY3=NY3+MIN(NCY-NY2,1)
C
C CALCOLA LO SPOSTAMENTO DELLA CLASSE N4
C
	NX4=NX4+MIN(NCX-NX4,1)
	NY4=NY4+MIN(NCY-NY4,1)
C
C RIASSEGNA LE NUOVE CLASSI N1,N2,N3,N4
C
	CALL COORCLAS(N1,NX1,NY1,NCX)
	CALL COORCLAS(N2,NX2,NY2,NCX)
	CALL COORCLAS(N3,NX3,NY3,NCX)
	CALL COORCLAS(N4,NX4,NY4,NCX)
C
C CERCA IL PUNTO PIU' VICINO AL NODO NON OSSERVATO
C
	NP=0
	DO I=N1,N2
	K1=LA(I)+1
	K2=LA(I+1)
	IF(K2.GE.K1) THEN
	DO K=K1,K2
	NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF
	ENDDO

        DO I=N3,N4
        K1=LA(I)+1
        K2=LA(I+1)
        IF(K2.GE.K1) THEN
        DO K=K1,K2
        NP=NP+1
	KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF
	ENDDO

	DO I=N1+NCX,N3-NCX,NCX
	K1=LA(I)+1
        K2=LA(I+1)
        IF(K2.GE.K1) THEN
        DO K=K1,K2
        NP=NP+1
        KS=IP(K)
        IWD(NP)=KS
        ENDDO
        ENDIF
	ENDDO

	DO I=N2+NCX,N3-NCX,NCX
	K1=LA(I)+1
        K2=LA(I+1)
        IF(K2.GE.K1) THEN
        DO K=K1,K2
        NP=NP+1
        KS=IP(K)
	IWD(NP)=KS
	ENDDO
	ENDIF
	ENDDO

	IF(NP.EQ.0) GOTO 10

	RETURN  
	END

C
C
C
	FUNCTION NEARPOIN(NI,NCX,X,Y,XORI,YORI,STP,IWD,NP)
	IMPLICIT DOUBLE PRECISION(A-H,O-Z)
	DIMENSION X(1),Y(1),IWD(1)
	NIX=NCX+1
        IPT=0
	DISTMIN2=1.D30
	XNODE=XORI + MOD(NI-1,NIX)*STP
	YNODE=YORI + ((NI-1)/NIX)*STP

	DO I=1,NP
	IS=IWD(I)
	DIST2=(X(IS)-XNODE)**2+(Y(IS)-YNODE)**2
	IF(DIST2.LT.DISTMIN2) THEN
	DISTMIN2=DIST2
	IPT=IS
	ENDIF
	ENDDO
	NEARPOIN=IPT
	RETURN
	END

	SUBROUTINE VINMEDIA(N1,N2,N3,N4,LA,IP,Z,ELZ)
	IMPLICIT DOUBLE PRECISION (A-H,O-Z)
	DIMENSION LA(1),IP(1),Z(1)
	NPT=0
	ELZ=0.D0
	K1=LA(N1)+1
	K2=LA(N1+1)
	IF(K2.GE.K1) THEN
	DO I=K1,K2
	IS=IP(I)
	ELZ=ELZ+Z(IS)
	NPT=NPT+1
	ENDDO
	ENDIF

	K1=LA(N2)+1
	K2=LA(N2+1)
	IF(K2.GE.K1) THEN
	DO I=K1,K2
	IS=IP(I)
	ELZ=ELZ+Z(IS)
	NPT=NPT+1
	ENDDO
	ENDIF

	K1=LA(N3)+1
	K2=LA(N3+1)
	IF(K2.GE.K1) THEN
	DO I=K1,K2
	IS=IP(I)
	ELZ=ELZ+Z(IS)
	NPT=NPT+1
	ENDDO
	ENDIF

	K1=LA(N4)+1
	K2=LA(N4+1)
	IF(K2.GE.K1) THEN
	DO I=K1,K2
	IS=IP(I)
	ELZ=ELZ+Z(IS)
	NPT=NPT+1
	ENDDO
	ENDIF
	ELZ=ELZ/NPT
	RETURN
	END


	SUBROUTINE CLASCOOR(NC,NX,NY,NCX)
	IMPLICIT INTEGER(A-Z)
	NX=MOD(NC - 1,NCX) + 1
	NY=(NC - NX)/NCX + 1
        RETURN
        END

	SUBROUTINE COORCLAS(NC,NX,NY,NCX)
	IMPLICIT INTEGER(A-Z)
	NC=(NY-1)*NCX+NX
	RETURN
	END
