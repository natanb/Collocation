C: PFTN vers. 03/Mag/89 :                                Matrjoska :
c	version update at may 15th 1991 - C.C. Tscherning and R.
c	Barzaghi
      PROGRAM  FASTCOL
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER(NMMAX=1024,NSMAX=600)
	logical ltabhx,lmodel
      COMMON/C1/ INM(NMMAX),VFM(NMMAX),VLM(NMMAX),VALM(NMMAX)
      COMMON/C2/ COV(NMMAX),SOL(NMMAX),INS(NSMAX),VFS(NSMAX)
      COMMON/C3/ VLS(NSMAX),VALS(NSMAX)
      CHARACTER*80 F1,F2,F3,FIL11,FIL12,FIL13
      PRINT*,'PROGRAM FASTCOL, VERS. 1991.05.15 '
C      CALL SECPU(ZCPUA)
      READ(5,*) IPM,HM,EPSI,NSTP1,NSTP2,NITER
          NL=NSTP1
          NF=NSTP2
      READ(5, '(1A)') FIL11
      READ(5,*) NF11
      READ(5, '(1A)' ) F1
      READ(5,*) IPS,HS
      READ(5, '(1A)') FIL12
      READ(5,*) NF12
      READ(5, '(1A)' ) F2
      READ(5, '(1A)' ) FIL13
      READ(5, '(1A)' ) F3
      READ(5,*) vardg2,dr,kmod,kmod1,kmod2,n,varn,ltabhx,lmodel
c     vardg2=variance of gravity (mgal)**2
c     dr=depth of Bjerhammar sphere in meters	
c     kmod, kmod1, kmod2 see COVFIT (define the degree variance model)
c     n=maximal degree of error degree variances
c     varn= noise variance
c     ltabhx=TRUE when covariance function is tabulated as a function of
c	spherical distance
c     lmodel=true when error degree varinces are non zero
      CALL LCOVI(vardg2,dr,KMOD1,KMOD2,KMOD,N,ltabhx,lmodel)
      KM=1
      PRINT*,'Legge da 11. almeno',NF11,' righe'
      OPEN (11,FILE=FIL11,status='old')
 5019 READ(11,F1,END= 5023)INM(KM),VFM(KM),VLM(KM),VALM(KM)
      SOL(KM)=0.D0
      KM=KM+1
      IF(KM.LE.NF11) GO TO   5019
 5023 NPM=KM-1
      IF(NF*NL.NE.NPM) THEN
      PRINT*,'Inconsistenza di dati',NF,NL,NPM
      STOP
      ENDIF
      KS=1
      PRINT*,'Legge da 12. al massimo',NF12,' righe'
      OPEN(12,FILE=FIL12,status='old')
 5025 READ(12,F2,END= 5027)INS(KS),VFS(KS),VLS(KS),VALS(KS)
      KS=KS+1
      IF(KS.LE.NF12) GO TO   5025
 5027 NPS=KS-1
      WRITE(*,*) '**********AUTOCOVARIANZA*********'
      DO 1001 L=1,NPM
      CALL LCOV(IPM,IPM,HM,HM,VFM(1),VFM(L),VLM(1),VLM(L),C)
      COV(L)=C
      IF(L.LT.21) WRITE(6,*) C
 1001 CONTINUE
      COV(1)=COV(1)+VARN
      WRITE(6,*) COV(1)
      DO 1002 J=5,NPM,5
      WRITE(15,'(1I7,5G13.6)')J,(COV(JJ),JJ=J-4,J)
 1002 CONTINUE
      IF (NITER.GT.0) CALL SOLVE (COV,VALM,SOL,NF,NL,NMMAX,EPSI,NITER)
          WRITE(6,*) (SOL(KK),KK=1,NPM)
      PRINT*,'Scrive su 13.'
      OPEN(13,FILE=FIL13,status='new')
      WRITE(6,*) '**********CROSSCOVARIANZA*********'
      DO 1003 JS=1,NPS
      VN=0.D0
      DO 1004 JM=1,NPM
      CALL LCOV(IPS,IPM,HS,HM,VFS(JS),VFM(JM),VLS(JS),VLM(JM),CR)
      IF(JS.EQ.1 .AND. JM.LT.21) WRITE(6,*) CR
      VN=VN+CR*SOL(JM)
 1004 CONTINUE
      VDIFF=VALS(JS)-VN
      WRITE(13,F3) INS(JS),VFS(JS),VLS(JS),VN,VDIFF
 1003 CONTINUE
      PRINT*,'Fine BcovaR'
C      CALL SECPU(ZCPUB)
C      PRINT*,'Durata totale CPU=',ZCPUB-ZCPUA,' sec.'
      END
      SUBROUTINE LCOV(KP,KQ,HP,HQ,FP,FQ,ALP,ALQ,CPQ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),LOGICAL (L)
      CHARACTER*72 PNAME
      COMMON /TABELC/Y(12800),CTTF(200),CTSF(20),SZ(30),AX(18),
     *MAXB(20),IX(8),IIX(17),IOLD
      COMMON /CMCOV/CCI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CCV(2,2),D(36),KI(37),NC1,NC2,LOCAL,LSUM
      COMMON /PR11/SINLOP,COSLOP,BSIZE(42),BSIZEN,BSIZEE,
     *COSLAP,SINLAP,RLONGP,RP,
     *HPP,RLATP,PRETAP,PREDP,LONECO,LNKSIP,LNETAP,LDEFVP,
     *NI,nNR,INDEX(42),IKP
C THE ARRAYS CONTAINS ERROR DEGREE-VARIANCES FOR RAPP 1981 AND
C GPM2 SOLUTIONS.
      COMMON /CTABH/RTA(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH,NTABH(15,5,5),NHE,NSTART,LTABH
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GM,LF,LT
C THE COMMON AREAS ARE USED FOR THE TRANSFER OF DATA TO AND FROM THE
C SUBROUTINES COVAX, CTABEL AND COVCG.
      COMMON /DDX/K7(15),K9(15),K11(15),K13(15),K15(15),K17(15),K19(15),
     *K21(15),K23(15),K8(15),C11(15),J2(2),I3(2),I4(2),LN(7),L(7)
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,II,JJ,N3,KK,kKQ,KkP,ND,NR,ND1,ND2
      COMMON/XSM/    SM(2001)
      DATA KFP,HPOLD,HQOLD,CR(4),CR(5),CR(8),CR(6),CR(7),CR(9)/
     *-1,2*-1.0D5,3*0.0,3*1.0/
      DATA KI(26),KI(27),KI(28),KI(29),KI(30),KI(31),
     *KI(32),KI(33),KI(35),KI(36),KI(37),CCI(14)
     */1,0,1,0,2,0,-1,1,3*0,0.5/
C
      DATA
     *K7/5*0,6*1,4*2/,K9/5*1,2,3,2,3,2,3,2,2,3,4/,K11/11*0,2,3,3,6/,
     *K13/11*1,2,3,3,6/,K15/0,1,-1,-1,1,0,0,-1,-1,2,2,4*0/,
     *K17/3*0,2,2,10*0/,K19/1,4*0,1,1,8*0/,K21/0,1,1,2,2,1,1,8*2/,
     *K23/5*1,2,1,2,1,2,1,1,1,2,2/,K8/0,1,1,2,2,0,0,4*1,4*0/,
     *C11/1.0D0,2*1.0D5,2*1.0D9,2*-206264.806D0,5*1.0D9,2.0D9,
     *2*1.0D9/,D/36*0.0D0/,J2/3,2/,I3/6,3/,I4/4,2/
C
      DATA RE,GMC,
     *D1,D2,D3,D4,D5,D0,BSIZE,SIGMA,SIGMA0,OLDT,OLDR,PREDP,
     *PRETAP,RADSEC,PI/6371.0E3,3.98D14,1.0D0,2.0D0,3.0D0,4.0D0,
     *5.0D0,2447*0.0D0,206264.806D0,3.1415926535D0/
      DATA 
     *IX,NPARM,NO,NAI,NLA,IC,IS,ISO,IGP,IT,IP,INDEX(1),
     *INDEX(2),IA,IA1,II,JR,NPARM1/20*0,2*9,2*2,1/
      DATA
     *IIX,IOLD,IPX/0,0,1,0,1,0,1,2,3,0,1,2,3,4,5,6,0,-1,-1/
      DATA GM,RE/3.98D14,6371.0D3/,PI/3.1415926535D0/
      HMAX = 3000.
      FPR=(FP/180)*PI
      FQR=(FQ/180)*PI
      vd=((ALQ-ALP)/180)*PI
      SP=SIN(FPR)
      CP=COS(FPR)
      SQ=SIN(FQR)
      CQ=COS(FQR)
      SL=SIN(vD)
      CL=COS(vD)
      DD=SP*SQ+CP*CQ*CL
      CR(1)=DD
      CR(2)=HP
      CR(3)=HQ
      CR(4)=SP
      CR(5)=SQ
      CR(6)=CP
      CR(7)=CQ
      CR(8)=SL
      CR(9)=CL
      CR(10) = GM/(RE+HP)**2
      CR(11) = GM/(RE+HQ)**2
      IF(KP.EQ.KKP.AND.KQ.EQ.KKQ) GOTO   5291
      KKP=KP
      KKQ=KQ
      KI(6)=KP
      KI(7)=KQ
      CALL COVBX (SM,cvv,0)
 5291 CALL COVCX(sm,c,0)
      CPQ=C
      RETURN
      ENTRY LCOVI(vardg2,DR,K2,K3,MODNUM,IMAX,ltabhx,lmodel)
	LF=.FALSE.
	LT=.TRUE.
	LTEST=LF
	LSUM=LF
	SUMSIG=D0
	MAXC1=1
	KI(3)=K2
	KI(4)=K3
	KI(5)=MODNUM
      IMAX1=IMAX+1
C
	
      S=DR
      CCI(10)=S
      RB2=(S+RE)**2
      R=(RE+S)/RE 
	aai=rb2*1.0e-8
      CCI(8) = AAI
      LOCAL=LT
      NC1=IMAX1
      NC2=3
      CALL COVAX(SM,CVV,IS)
      CVV=VAR(SM,IS,NC2,DR,AAI,D0,IMAX1,LF)
      write(6,*)' CVV,IS,NC2,DR,AAI,IMAX1',CVV,IS,NC2,S,AAI,IMAX1
C
	local=.not.lmodel
	lzero=local
      IF (LZERO) WRITE(6,1112)IMAX
 1112 FORMAT( I4,' DEGREE-VARIANCES EQUAL TO ZERO')
      IF (LOCAL) GO TO 1040
      IF (.NOT.LMODEL) GO TO 1041
C
C --------------- INPUT (3B) ---------------------------------
C INPUT OF MODEL NUMBER, FIRST DEGREE TO BE USED , SCALE FACTOR,
C AND A LOGICAL VARIABLE (LWR) TRUE WHEN A LISTING OF THE DEGREE
C VARIANCES IS NEEDED.
      WRITE(10,*)
     *' INPUT ERROR DEG.VAR. MODEL NO., IMIN, SCALE FACTOR AND LIST?'
      READ(5,*)MODEL,IMIN,VG,LWR
C MODEL 0 IS A MODEL INPUT FROM A FILE, PNAME. 
C MODEL 1 IS THE ERROR DEGREE-VARIANCES FOR WENZELS GPM2 SET.
C MODEL 2 IS A LINEAR MODEL IN THE DEGREE, SO THAT FOR VG=1
C     THE ERROR DEGREE VARIANCE IS EQUAL TO 1.0 AT DEGREE 100.
C MODEL 3 IS A SIMILAR, BUT QUADRATIC MODEL.
      WRITE(6,116)MODEL,IMIN,IMAX,VG
  116 FORMAT(' MODEL ',I3,' USED FROM DEGREE ',I3,' TO ',I3,
     *' WITH SCALE FACTOR= ',F9.6)
C
      MODEL1=MODEL+1 
      DO 1043 I = 2, IMAX
      SIGMA(I+1) = D0
      IF (I.LE.IMIN.OR.MODEL.EQ.0) GO TO 1043
      GO TO (1051,1054,1055),MODEL
 1051 SIGMA(I+1) = (2*I+1)*(VG*9.81)**2
      GO TO 1043
 1054 SIGMA(I+1) = I*1.0D-2*VG
      GO TO 1043
 1055 SIGMA(I+1) = I**2*1.0D-4*VG
 1043 CONTINUE
C
      IF (MODEL.NE.0) GO TO 1063 
C INPUT NAME OF FILE HOLDING DEGREE-VARIANCES (IN MGAL**2).
      WRITE(*,*)' INPUT NAME OF FILE HOLDING DEG.VAR.' 
      READ(5,163)PNAME
  163 FORMAT(A72) 
      WRITE(6,*) ' DEGREE-VARIANCES INPUT FROM FILE ',PNAME 
      OPEN(19,FILE=PNAME,STATUS='OLD')
      READ(19,*)(SIGMA(I+1),I=IMIN,IMAX)
      REWIND(19) 
      DO 1064 I=IMIN,IMAX 
 1064 SIGMA(I+1)=SIGMA(I+1)*VG 
C 
 1063 IF(LWR) WRITE(6,1198) (SIGMA(I),I=3,IMAX1)
      GO TO 1042
C
C --------------- INPUT (3A) ---------------------------------
C INPUT OF EMPIRICAL DEGREE-VARIANCES FROM DEGREE 2.
 1041 WRITE(*,*)' INPUT DEGREE-VARIANCES' 
      READ(5,1198) (SIGMA(I), I = 3, IMAX1)
 1198 FORMAT(8F8.4)
C NOTE THAT THE DEGREE-VARIANCE OF ORDER I IS STORED IN SIGMA(I+1).
C
      WRITE(6,1111)IMAX
 1111 FORMAT(I4,' EMPIRICAL ANOMALY DEGREE-VARIANCES FOR DEGREE',
     *' > 1,'/,' IN UNITS OF MGAL**2 : ')
      WRITE(6,1198) (SIGMA(I), I = 3, IMAX1)
C
 1042 CONTINUE
	is=0
      DO 1001 I = 3, IMAX1
      SIGMA0(IS+I)=SIGMA(I)
 1001 SUMSIG = SUMSIG + SIGMA(I)
      WRITE(6,*)' SUMSIG', SUMSIG 
 1040 IF (IMAX1+IS.LT.1200) GO TO 1002
      WRITE(6,1108)
 1108 FORMAT(' SUBSCRIPTS OF ARRAY SIGMA EXCEEDS ARRAY LIMIT, STOP.')
C
 1002 AAI=(VARDG2-SUMSIG)*RB2*1.0E-8/CVV
      CCI(8)=AAI
      CALL COVAX(SM,CVV,IS)
      CALL COVBX(SM,CVV,IS)
      CALL COVCX(SM,CVV,IS)
      IF (ABS(CVV-VARDG2).GT.0.1)
     *WRITE(6,7464)CVV,VARDG2
 7464 FORMAT(' ** WARNING ** CVV,VARGD2= ',2E15.8)
C
 1110 FORMAT(/' RATIO R/RE                              =      ',F9.6,/
     *' DEPTH TO BJERHAMMAR SPHERE (R-RE)       = ',F10.2,' M'/
     *' VARIANCE OF POINT GRAVITY ANOMALIES     = ',F10.2,' MGAL**2'/
     *' THE FACTOR A, DIVEDED BY RE**2 IS       = ',F10.2,' MGAL**2')
      A0 = AAI*1.0E10/RE**2
      WRITE(6,1110)R,DR,VARDG2,A0
C
      if(ltabhx) then
C ------------------ INPUT (3D) ------------------------------
C INPUT OF CONSTANTS SPECIFYING TABLES USED WITH FIXED HEIGHTS
C AND FUNCTIONALS. NHE IS NUMBER OF HEIGHTS (MAX 5), NINTH THE
C NUMBER OF INTERVALS AND SIZEI THE INTERVAL LENGTH IN ARCSECONDS.
C
      WRITE(*,*)' INPUT NHE, NINTH, SIZEI' 
      READ(5,*)NHE,NINTH,SIZEI
C  41 FORMAT(2I4,F8.1)
      WRITE(6,42)NINTH,SIZEI
   42 FORMAT(' NUMBER OF INTERVALS=',I4,', SIZE =',F9.1,' ARCSEC.',
     */,' HEIGHT (M)   FUNCTIONAL TYPES')
      IF (NINTH.GT.499) WRITE(6,43)
   43 FORMAT(' *** WARNING ***  NINTH DECREASED TO 499')
      IF (NINTH.GT.499) NINTH=499
      DO 44 I=1,NHE
      WRITE(*,*)' INPUT H AND NUMBER OF FUNCTIONALS' 
      READ(5,*)HTA(I),NFU(I)
C INPUT OF HEIGHT IN METERS AND NUMBER OF FIXED FUNCTIONALS.
C  45 FORMAT(F9.1,I3)
      WRITE(*,*)' INPUT FUNCTIONAL TYPES' 
      READ(5,*)(KEYH(J,I),J=1,NFU(I))
C INPUT OF FUNCTIONAL TYPES.
      WRITE(6,47)HTA(I),(KEYH(J,I),J=1,NFU(I))
   47 FORMAT(F10.1,5I4)
   44 CONTINUE
C  46 FORMAT(5I3)
      CALL INTABH(SM,0,LTEST)
	endif
      KKP=-1
      KKQ=-1
      END
      SUBROUTINE SOLVE(AM,TNO,SOL,N,M,NAREA,EPSI,NNMX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NTP=131072)
      DIMENSION SOL(NAREA),AM(NAREA),TNO(NAREA)
      COMMON /XX/PSV(NTP),QSV(NTP)
      COMMON /YY/RES(NTP),UA(NTP)
      COMMON /ZZ/SERV(26*NTP)
      COMMON /TT/JSERV(16*NTP)
      PRINT*,'ITERATIVE SOLUTIN OF A TOEPLITZ/TOEPLITZ SYSTEM'
      NM=N*M
      IF(NM.LE.0) THEN
      PRINT*,'END'
      STOP
      ENDIF
      PRINT*,'SINGLE BLOCK DIMENSION  =',N
      PRINT*,'NUMBER OF BLOCKS          =',M
      PRINT*,'GLOBAL DIMENSION   N*M =',N*M
      NT=1
      DO 1005 J=1,30
      IF(NT.LT.NM) NT=NT*2
 1005 CONTINUE
      PRINT*,'POWER OF TWO NOT LESS THAN=',NT
      IF(NT.GT.NTP) THEN
      PRINT*,'THE GLOBAL DIMENSION IS GREATER THAN',NTP
      PRINT*,'(THAT IS THE DIMENSION OF DUMMY ARRAYS)'
      PRINT*,'STOP IN SOLVE'
      STOP
      ENDIF
      CALL WADO (N,M,NM,NT,AM,UA,TNO,SOL,RES,PSV,QSV,SERV,JSERV,EPSI,NNM
     &X)
      END
      SUBROUTINE WADO (N,M,NM,NT,AM,UA,TNO,SOL,RES,PSV,QSV,SERV,JSERV,EP
     &SI,NNMX)
      IMPLICIT DOUBLE PRECISION (A-G,O-Z)
      IMPLICIT CHARACTER(H)
      DIMENSION AM(NM),UA(NM),TNO(NM),SOL(NM),RES(NM)
      DIMENSION PSV(NM),QSV(NM),SERV(26*NT),JSERV(16*NT)
      DOUBLE PRECISION ZCPUB,ZCPUA
      COMMON /XTOEPL/  NNT,MMT,NMT,NTT,NSER,MSER
      NNT=N
      MMT=M
      NMT=NNT*MMT
      NTT=NT
      IF(NTT.LT.NMT) STOP 333
      NSER=26*NTT
      MSER=16*NTT
      IF(NM.LT.20) THEN
      PRINT*,'La toeplitz assegnata e'' quindi....'
      WRITE(*,'(1X,7G11.4)')(AM(K),K=1,NM)
      ELSE
      PRINT*,'Primo val. della toeplitz:',AM(1)
      NMA =2
      NMI=2
      SUM=0.D0
      DO 1006 J=2,NM
      SUM=SUM+ABS (AM(J))
      IF(AM(J).GT.AM(NMA))NMA=J
      IF(AM(J).LT.AM(NMI))NMI=J
 1006 CONTINUE
      PRINT*,'Somma dei valori assol. degli elem.non-diag.',SUM
      PRINT*,'Ultimo elemento ',AM(NM)
      PRINT*,'Elemento non diag. piu'' grande',AM(NMA),NMA
      PRINT*,'                  piu'' piccolo',AM(NMI),NMI
      ENDIF
      IF (INICID(SERV(1+12*NT),14*NT,JSERV,16*NT,4*NT).LT.0)STOP 1
      PRINT*,'Vettore termine noto del sistema (i primi elem.) :'
      WRITE(*,'(1X,7G11.4)')(TNO(K),K=1,MIN(NM, 31))
      PRINT*,'Criterio di convergenza      EPSI=',EPSI
      PRINT*,'Massimo numero di iterazioni NNMX=',NNMX
      PRINT*,' '
      IF(NNMX.LT.1.OR.EPSI.LT.0.D0) RETURN
      NMNM=0
      SOMMA=0.0D0
      DO 1007 J=2,NM
      SOMMA=SOMMA+AM(J)
 1007 CONTINUE
      SOMMA=SOMMA/(NM*AM(1)-AM(1))
      UA(1)=AM(1)
      UA(2)=-SOMMA/(1.0D0+SOMMA*NM)
      PRINT*,'Precondiziono con il solo termine diag. 1=si'
C      READ(*,'(1A)') HHH
	HHH='1'
      IF(HHH.EQ.'1') THEN
      UA(2)=0.D0
      PRINT*,'Uso solo il termine diag.'
      ELSE
      PRINT*,'Usa una matrice di precondizionamento piena'
      ENDIF
C      CALL SECPU (ZCPUA)
      DO 1008 J=1,NM
      SOL(J)=1.D0
 1008 CONTINUE
      CALL FASTOE (N,M,NMNM,NT,AM,UA,TNO,SOL,RES,PSV,QSV,SERV,JSERV,EPSI
     &,TEST,ALFA,NNMX)
C      CALL SECPU (ZCPUB)
      PRINT*,'Vettore soluzione (i primi elementi):'
      WRITE(*,'(1X,5G15.7)')(SOL(K),K=1,MIN(NM,66))
      PRINT*,'Errore finale ottenuto',TEST
      PRINT*,' '
C      PRINT*,'Secondi di CPU :',ZCPUB-ZCPUA,' per la soluz.'
      END
      SUBROUTINE FASTOE (N,M,NM,NT,AM,UA,TNO,SOL,RES,PSV,QSV,SERV,JSERV,
     &EPSI,TEST,ALFA,NNMX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION AM(*),UA(*),TNO(*),SOL(*),RES(*)
      DIMENSION PSV(*),QSV(*),SERV(26*NT),JSERV(16*NT)
      COMMON /XTOEPL/  NNT,MMT,NMT,NTT,NSER,MSER
      NNT=N
      MMT=M
      NMT=NNT*MMT
      NTT=NT
      IF(NTT.LT.NMT) STOP 1333
      NSER=26*NTT
      MSER=16*NTT
      IF (NM.NE.NMT) THEN
      NM=NMT
      IF (INICID(SERV(1+12*NT),14*NT,JSERV,16*NT,4*NT).LT.0)STOP 1334
      ENDIF
      CALL GCPC (EPSI,TEST,ALFA,NNMX,AM,UA,TNO,RES,PSV,QSV,SOL,SERV,JSER
     &V)
      IF(ALFA.LT.0.D0) STOP 777
      END
      SUBROUTINE GCPC (EPSI,TEST,ALFA,NNMX,AM,UA,TNO,RES,PSV,QSV,SOL,VS,
     &JS)
      IMPLICIT DOUBLEPRECISION (A-H,O-Z)
      CHARACTER*64 HNOTA
      DIMENSION AM(*),UA(*),SOL(*),RES(*),TNO(*),PSV(*),QSV(*)
      DIMENSION VS(*),JS(*)
      ZERO=0.0D0
      DUNO=1.0D0
      HNOTA=' '
      NNNN=NNMX
      IF (NNNN.LE.0) THEN
      NNNN=-NNNN
      IF (ALFA.LE.ZERO) THEN
      PRINT*,'ERROR IN PCG AT RESTART POINT'
      PRINT*,'ALFA =',ALFA
      STOP 999
      ENDIF
      TEST=TEST/ALFA
      GO TO  5342
      ENDIF
      CALL ZERVET (PSV)
      CALL PROMAV (AM, SOL, QSV, VS, JS)
      CALL SCALPR (SOL, QSV, TEST)
      CALL COPIOV (TNO, RES)
      ALFA=-DUNO
      CALL XSAXPY (ALFA, QSV, RES)
      CALL APPRIN (UA, RES, QSV)
      CALL SCALPR (RES, QSV, ALFA)
      TEST=DMAX1(ALFA,TEST)
      IF (TEST.LE.ZERO) THEN
      PRINT*,'INITIAL FATAL ERROR IN PCG:'
      PRINT*,'TEST=',TEST
      STOP 999
      ENDIF
      TEST=DUNO/TEST
      IF (ALFA.LE.ZERO) THEN
      PRINT*,'INITIALIZATION ERROR IN PCG:'
      PRINT*,'TH PRECONDITIONING MATRIX IS NOT'
      PRINT*,'POSITIVE DEFINITE'
      PRINT*,'ALFA=',ALFA
      STOP 999
      ENDIF
      ALFA=DUNO/ALFA
 5340 CONTINUE
      NNNN=NNNN-1
      IF(MOD(NNNN,10).EQ.0) PRINT*,'STEP ',NNNN
      CALL XSAXPY (ALFA, QSV, PSV)
      CALL PROMAV (AM, PSV, QSV, VS, JS)
      CALL SCALPR (PSV, QSV, ALFA)
      PRINT*,'AFTER PROMAV : ALFA=',ALFA
      IF (ALFA.LE.ZERO) THEN
      HNOTA='ERROR: ALFA IS NEGATIVE IN ITERATION'
      PRINT*,HNOTA
      PRINT*,'ALFA = ',ALFA
      IF(NNNN+1.EQ.ABS(NNMX)) STOP 999
      GOTO  5344
      ENDIF
      ALFA=DUNO/ALFA
      CALL XSAXPY (ALFA, PSV, SOL)
      ALFA=-ALFA
      CALL XSAXPY (ALFA, QSV, RES)
      CALL APPRIN (UA, RES, QSV)
      CALL SCALPR (RES, QSV, ALFA)
 5342 CONTINUE
      HNOTA='ERROR: THE PRECONDITIONING ALFA IS NEGATIVE'
      PRINT*,'AFTER APPRIN : ALFA=',ALFA
      IF (ALFA     .LE.ZERO) GO TO  5344
      HNOTA='PCG CONVERGES CORRECTLY'
      DECIDO=DSQRT(TEST*ALFA)
      PRINT*,'DECIDE =',DECIDO,'   NNNN=',NNNN
      IF (DECIDO   .LT.EPSI) GO TO  5344
      HNOTA='END WITHOUT COMPLETE CONVERGENCE'
      IF (NNNN     .LE.0   ) GO TO  5344
      ALFA=DUNO/ALFA
      GO TO  5340
 5344 CONTINUE
      TEST=TEST*ALFA
      PRINT*,'NUMBER OF ITERATIONS IN PCG',ABS(NNMX)-NNNN
      PRINT*,HNOTA
      END
      SUBROUTINE ZERVET (Y)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION Y(NM)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      DO 1009 J=1,NM
      Y(J)=0.0D0
 1009 CONTINUE
      END
      SUBROUTINE COPIOV (X,Y)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(NM),Y(NM)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      DO 1010 J=1,NM
      Y(J)=X(J)
 1010 CONTINUE
      END
      SUBROUTINE XSAXPY (S,X,Y)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(NM),Y(NM)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      DO 1011 J=1,NM
      Y(J)=Y(J)+S*X(J)
 1011 CONTINUE
      END
      SUBROUTINE SCALPR (X,Y,S)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(NM),Y(NM)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      S=0.
      DO 1012 J=1,NM
      S=S+X(J)*Y(J)
 1012 CONTINUE
      END
      SUBROUTINE APPRIN (UA,X,Y)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(NM),Y(NM),UA(NM)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      UU=1.0D0/UA(1)
      SOMMA=0.D0
      DO 1013 J=1,NM
      SOMMA=SOMMA+X(J)
 1013 CONTINUE
      SOMMA=SOMMA*UA(2)*UU
      DO 1014 J=1,NM
      Y(J)=UU*X(J)+SOMMA
 1014 CONTINUE
      END
      SUBROUTINE PROMAV (X,Y,R,SERV,JSERV)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION R(N,M),X(N,M),Y(N,M),SERV(NSER),JSERV(MSER)
      COMMON /XTOEPL/  N,M,NM,NT,NSER,MSER
      NCOR=4*NT
      IF (26*NT.GT.NSER) THEN
      PRINT*,'IN PROMAV : DOUBLE PRECISION WORD'
      PRINT*,'NEEDED',13*NCOR/2,'CAN BE ALLOCATED',NSER
      STOP
      ENDIF
      IF (NCOR*4.GT.MSER) THEN
      PRINT*,'IN PROMAV : INTEGER WORD'
      PRINT*,'NEEDED',4*NCOR,'  CAN BE ALLOCATED',MSER
      STOP
      ENDIF
      DO 1015 J=1,3*NCOR
      SERV(J)=0.D0
 1015 CONTINUE
      CALL WNITOE (R,X,Y,SERV,SERV(1+NCOR),SERV(1+2*NCOR),SERV(1+3*NCOR)
     &,JSERV,N,M,NT)
      END
      SUBROUTINE WNITOE (R,X,Y,SR,SX,SY,SAUX,JAUX,N,M,NT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION R(N,M),X(N,M),Y(N,M)
      DIMENSION SR(2*N,2*M),SX(2*N,2*M),SY(2*N,2*M)
      DIMENSION SAUX(14*NT),JAUX(16*NT)
      NU=N-1
      MU=M-1
      DO 1016 K=0,MU
      DO 1017 J=0,NU
      XX=X(J+1,K+1)
      SX(N+J,M+K)=XX
      SX(N-J,M+K)=XX
      SX(N+J,M-K)=XX
      SX(N-J,M-K)=XX
 1017 CONTINUE
 1016 CONTINUE
      DO 1018 K=1,M
      DO 1019 J=1,N
      SY(J,K)=Y(J,K)
 1019 CONTINUE
 1018 CONTINUE
      IF (KONCID (SR,SX,SY,SAUX,JAUX,4*NT)     .LT.0) STOP 2
      DO 1020 K=0,MU
      DO 1021 J=0,NU
      R(J+1,K+1)=SR(N+J,M+K)
 1021 CONTINUE
 1020 CONTINUE
      END
      INTEGER FUNCTION INICID (Aux,Naux,Jaux,Njaux,N)
      DOUBLE PRECISION Aux (Naux)
      INTEGER Jaux(Njaux)
      NA=7*N/2
      IF (Naux.LT.NA) THEN
      PRINT*,'INICID REAL AREA TOO SMALL : NEEDED',NA
      INICID=-1
      RETURN
      ENDIF
      NJ=4*N
      IF (Njaux.LT.NJ) THEN
      PRINT*,'INICID INTEGER AREA TOO SMALL : NEEDED',NJ
      INICID=-2
      RETURN
      ENDIF
      NQ=N/4
      NJX=N+1
      NJY=NJX+6*NQ
      N2=1
      DO 1022 J=1,30
      N2=2*N2
      IF(N2.EQ.N) THEN
      CALL XINICD (Aux,Jaux,Jaux(NJX),JAUX(NJY),N,J)
      INICID=0
      RETURN
      ENDIF
 1022 CONTINUE
      PRINT*,'INICID VECTOR ARE NOT ON BASE 2'
      INICID=-3
      END
      SUBROUTINE XINICD (Gos,IBO,JX,JY,N,NE)
      IMPLICIT DOUBLEPRECISION (A-H,O-Z)
      PARAMETER (LS=6)
      DOUBLE PRECISION GOS(0:N/4-1,LS)
      INTEGER IBO(0:N-1),JX(0:N/4-1,LS),JY(0:N/4-1,LS)
      NB=1
      DO 1023 J=0,N-1
      IBO(J)=MOD(J,2)
 1023 CONTINUE
 5395 CONTINUE
      NB=NB*2
      IF (N.LE.NB) GO TO  5399
      DO 1024 J=0,N-1
      IBO(J)=IBO(J)*2+MOD(J/NB,2)
 1024 CONTINUE
      GO TO  5395
 5399 CONTINUE
      NQ=N/4
      NM=NQ*2
      PGRLM=ATAN(1.D0)/(0.5D0*NQ)
      DO 1025 J=0,NQ-1
      GOS(J,1)=COS(PGRLM*J)
 1025 CONTINUE
      L=1
      DO 1026 JV=2,LS-1
      L=L*2
      LSE=JV
      IF(L.GE.NQ) GOTO  5407
      DO 1027 J=0,NQ-1,L
      SS=GOS(J,1)
      DO 1028 K=J,J+L-1
      GOS(K,JV)=SS
 1028 CONTINUE
 1027 CONTINUE
 1026 CONTINUE
      LSE=LSE+1
 5407 CONTINUE
      L=1
      DO 1029 JV =1,LS-1
      IF(L.GT.NQ)GOTO  5417
      KK=-1
      DO 1030 J=NM,NQ+1,-L
      DO 1031 K=0,L-1
      KK=KK+1
      JX(KK,JV)=(K+J)*2+1
 1031 CONTINUE
 1030 CONTINUE
      KK=-1
      DO 1032 J=1,NQ,L
      DO 1033 K=L-1,0,-1
      KK=KK+1
      JY(KK,JV)=(K+J)*2-1
 1033 CONTINUE
 1032 CONTINUE
      L=L*2
 1029 CONTINUE
 5417 CONTINUE
      JX(0,1)=LSE
      FATTO=2.D0
      FATTO=DSQRT(FATTO)
      GOS(0,1)=FATTO**(NE-2)
      END
      INTEGER FUNCTION KONCID (Vr,Va,Vb,Aux,Jaux,N)
      PARAMETER (LS=6)
      DOUBLE PRECISION VR(N),VA(N),VB(N),AUX(*)
      INTEGER JAUX(*)
      IF(N.LT.4) THEN
      PRINT*,'THE MINIMUM NUMBER OF ELEMENTS FOR CONVOLUTION IS 4'
      KONCID=-1
      RETURN
      ENDIF
      NQ=N/4
      JX=N+1
      JY=JX+NQ*LS
      JS=NQ*LS+1
      JZ=JS+N
      CALL XKONCD (VR,VA,VB,Aux,Aux(JS),Aux(Jz),Jaux,Jaux(JX),Jaux(JY),N
     &)
      KONCID=0
      END
      SUBROUTINE XKONCD (YC,YA,YB,GOS,ZA,ZB,IBO,JX,JY,L)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (LS=6)
      DOUBLE PRECISION YC(0:L-1),YA(0:L-1),YB(0:L-1)
      DOUBLE PRECISION GOS(0:L/4-1,LS),ZA(0:L-1),ZB(0:L-1)
      INTEGER IBO(0:L-1),JX(0:L/4-1,LS),JY(0:L/4-1,LS)
      FATTO=GOS(0,1)
      DO 1034 K=0,L-1
      ZB(K)=YA(K)
 1034 CONTINUE
      CALL DPHP (ZA, ZB, GOS, IBO, JX, JY, L, LS)
      DO 1035 K=0,L-1
      YC(K)=YB(K)
 1035 CONTINUE
      CALL DPHP (ZB, YC, GOS, IBO, JX, JY, L, LS)
      ZA(0)  =2.0D0*FATTO*ZA(0)*ZB(0)
      ZA(L/2)=2.0D0*FATTO*ZA(L/2)*ZB(L/2)
      DO 1036 K=1,L/2-1
      ZAA=FATTO*ZA(K)
      ZBB=FATTO*ZA(L-K)
      ZA(K)  =ZAA*(ZB(K)+ZB(L-K))+ZBB*(ZB(K)-ZB(L-K))
      ZA(L-K)=ZBB*(ZB(L-K)+ZB(K))+ZAA*(ZB(L-K)-ZB(K))
 1036 CONTINUE
      CALL DPHP (YC, ZA, GOS, IBO, JX, JY, L, LS)
      END
      SUBROUTINE DPHP (Z,Y,GOS,IBO,JX,JY,NN,LS)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION Z(0:NN-1),Y(0:NN-1),GOS(0:NN/4-1,LS)
      DIMENSION IBO(0:NN-1),JX(0:NN/4-1,LS),JY(0:NN/4-1,LS)
      NQ=NN/4
      NM=2*NQ
      NT=NN-NQ
      NQU=NQ-1
      NMU=NM-1
      JV=JX(0,1)
      LSS=2**(JV-1)
      VV=DSQRT(1.D0/NN)
      NU=NN-1
      DO 1037 J=0,NU
      Z(IBO(J))=Y(J)
 1037 CONTINUE
      JJ=-1
C*VDIR: IGNORE RECRDEPS (Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1038 J=0,NM-1
      JJ=JJ+2
      VAL   = VV*Z(JJ-1)
      WAL     = VV*Z(JJ)
      Y(J)  = VAL+WAL
      Y(J+NM) = VAL-WAL
 1038 CONTINUE
      IF (NN.LE.2) THEN
      DO 1039 J=0,NU
      Z(J)=Y(J)
 1039 CONTINUE
      GOTO  5627
      ENDIF
      JJ=-1
C*VDIR: IGNORE RECRDEPS (Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1040 J=0,NM-1
      JJ=JJ+2
      VAL   = Y(JJ-1)
      WAL     = Y(JJ)
      Z(J)  = VAL+WAL
      Z(J+NM) = VAL-WAL
 1040 CONTINUE
      L=NQ/2
      IF(L.LE.0) GOTO  5627
 5603 CONTINUE
      IF(.NOT.(L.LT.LSS))GOTO 1041
      JV=JV-1
      JJ=-1
      JM=NMU
C*VDIR: IGNORE RECRDEPS(Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1042 J=0,L-1
      JJ=JJ+2
      JM=JM+2
      Y(J)   =Z(JJ-1)+Z(JJ)
      Y(J+NQ)=Z(JM-1)+Z(JM)
      Y(J+NM)=Z(JJ-1)-Z(JJ)
      Y(J+NT)=Z(JM-1)-Z(JM)
 1042 CONTINUE
      LNNU=NU+L
      LNMU=NMU+L
      JF=NN+1
      JS=NQU+L
C*VDIR: IGNORE RECRDEPS(Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1043 J=L,NQU
      JJ=JJ+2
      JF=JF-2
      XX= GOS(J,JV)*Z(JJ)+GOS(JS-J,JV)*Z(JX(J,JV))
      YY=-GOS(J,JV)*Z(JF)+GOS(JS-J,JV)*Z(JY(J,JV))
      Y(J)     =Z(JJ-1) +XX
      Y(LNMU-J)=Z(JF-1) +YY
      Y(J+NM)  =Z(JJ-1) -XX
      Y(LNNU-J)=Z(JF-1) -YY
 1043 CONTINUE
      GOTO 1044
 1041 CONTINUE
      JJ=-1
      JM=NMU
      LU=L-1
C*VDIR: IGNORE RECRDEPS(Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1045 J=0,LU
      JJ=JJ+2
      JM=JM+2
      Y(J)   =Z(JJ-1)+Z(JJ)
      Y(J+NQ)=Z(JM-1)+Z(JM)
      Y(J+NM)=Z(JJ-1)-Z(JJ)
      Y(J+NT)=Z(JM-1)-Z(JM)
 1045 CONTINUE
      DO 1046 K=L,NQU,L
      JJ=K*2
      JF=NN-JJ
      LNM=NM-2*K
      LNN=NN-2*K
      SS=GOS(K,1)
      ZZ=GOS(NQ-K,1)
C*VDIR: IGNORE RECRDEPS(Y)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1047 J=K,K+LU
      XX= SS*Z(JJ+1)+ZZ*Z(JF+1)
      YY= ZZ*Z(JJ+1)-SS*Z(JF+1)
      Y(J)     =Z(JJ) +XX
      Y(J+LNM) =Z(JF) +YY
      Y(J+NM)  =Z(JJ) -XX
      Y(J+LNN) =Z(JF) -YY
      JJ=JJ+2
      JF=JF+2
 1047 CONTINUE
 1046 CONTINUE
 1044 CONTINUE
      L=L/2
      IF (L.LE.0) THEN
      DO 1048 J=0,NU
      Z(J)=Y(J)
 1048 CONTINUE
      GO TO  5627
      ENDIF
      IF(.NOT.(L.LT.LSS))GOTO 1049
      JV=JV-1
      JJ=-1
      JM=NMU
C*VDIR: IGNORE RECRDEPS(Z)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1050 J=0,L-1
      JJ=JJ+2
      JM=JM+2
      Z(J)   =Y(JJ-1)+Y(JJ)
      Z(J+NQ)=Y(JM-1)+Y(JM)
      Z(J+NM)=Y(JJ-1)-Y(JJ)
      Z(J+NT)=Y(JM-1)-Y(JM)
 1050 CONTINUE
      LNNU=NU+L
      LNMU=NMU+L
      JF=NN+1
      JS=NQU+L
C*VDIR: IGNORE RECRDEPS(Z)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1051 J=L,NQU
      JJ=JJ+2
      JF=JF-2
      XX= GOS(J,JV)*Y(JJ)+GOS(JS-J,JV)*Y(JX(J,JV))
      YY=-GOS(J,JV)*Y(JF)+GOS(JS-J,JV)*Y(JY(J,JV))
      Z(J)     =Y(JJ-1) +XX
      Z(LNMU-J)=Y(JF-1) +YY
      Z(J+NM)  =Y(JJ-1) -XX
      Z(LNNU-J)=Y(JF-1) -YY
 1051 CONTINUE
      GOTO 1052
 1049 CONTINUE
      JJ=-1
      JM=NMU
      LU=L-1
C*VDIR: IGNORE RECRDEPS(Z)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1053 J=0,LU
      JJ=JJ+2
      JM=JM+2
      Z(J)   =Y(JJ-1)+Y(JJ)
      Z(J+NQ)=Y(JM-1)+Y(JM)
      Z(J+NM)=Y(JJ-1)-Y(JJ)
      Z(J+NT)=Y(JM-1)-Y(JM)
 1053 CONTINUE
      DO 1054 K=L,NQU,L
      JJ=K*2
      JF=NN-JJ
      LNM=NM-2*K
      LNN=NN-2*K
      SS=GOS(K,1)
      ZZ=GOS(NQ-K,1)
C*VDIR: IGNORE RECRDEPS(Z)
C$DIR   NO_RECURSIVE
CDIR$   IVDEP
      DO 1055 J=K,K+LU
      XX= SS*Y(JJ+1)+ZZ*Y(JF+1)
      YY= ZZ*Y(JJ+1)-SS*Y(JF+1)
      Z(J)     =Y(JJ) +XX
      Z(J+LNM) =Y(JF) +YY
      Z(J+NM)  =Y(JJ) -XX
      Z(J+LNN) =Y(JF) -YY
      JJ=JJ+2
      JF=JF+2
 1055 CONTINUE
 1054 CONTINUE
 1052 CONTINUE
      L=L/2
      IF (L.GT.0) GO TO  5603
 5627 CONTINUE
      END
C      SUBROUTINE SECPU (ZA)
C     DOUBLE PRECISION ZA
C      INTEGER N8(8)
C      CALL UCSINFO$(7,ISTAT,N8)
C      ZA=2.D-4*(N8(4)+N8(8))
C      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                  C
C                      I F R A C                                   C
C                                                                  C
C  SUBROUTINE GIVING TRUE INTEGER PART OF REAL REAL    C
C                                                                  C
C  RF, JUNE 1983                                                   C
C                                                                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      INTEGER FUNCTION IFRAC(R)
C
      IMPLICIT REAL *8(A-H,O-Z)
      IF (R.LT.0.0D0) GO TO 1
        IFRAC = R
      RETURN
 1      IFRAC = R - 0.999999999D0
      RETURN
      END
C -------------------------------------------------------
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                  C
C                      I S P C O V                                 C
C                                                                  C
C  INITIALIZATION PROCEDURE FOR FAST 1-DIMENSIONAL EQUIDISTANT     C
C  SPLINE INTERPOLATION, WITH FREE BOUNDARY END CONDITIONS         C
C  REFERENCE: JOSEF STOER: EINFUHRUNG IN DIE NUMERISCHE MATHEMATIK C
C  I, SPRINGER 1972. MODIFIED FOR COVARIANCE INTERPOLATION.        C
C                                                                  C
C  PARAMETERS (REAL):                                  C
C                                                                  C
C  Y  GIVEN VALUES, Y(1), ..., Y(N)                                C
C                                                                  C
C  R  SPLINE MOMENTS (1 ... N), TO BE USED BY FUNCTION 'SPLINE'    C
C                                                                  C
C  Q  WORK-ARRAY, DECLARED AT LEAST 1:N                            C
C                                                                  C
C  RENE FORSBERG, JULY 1983, MODIFIED BY C.C.TSCHERNING OCT 87.    C
C                                                                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE ISPCOV(NTAB,NN)
C
      IMPLICIT REAL *8(A-H,O-Z)
      LOGICAL LTABH
      COMMON /TABELC/Y(12800),CTTF(200),CTSF(20),SZ(30),AX(18),
     *MAXB(20),IX(8),IIX(17),IOLD
      COMMON /CTABH/R(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH,NTABH(15,5,5),NHE,NSTART,LTABH
      DIMENSION Q(1200)
C
      N=NINTH+2
      KY0=(NTAB+NN-1)*N
      KSTART=N*(NN-1)
      Q(1) = 0.0D0
      R(1+KSTART) = 0.0D0
      DO 11 KK = 2, N-1
        K=KK+KSTART
        KY=KK+KY0
        P = Q(K-1)/2+2
        Q(K) = -0.5E0/P
        R(K) = (3*(Y(KY+1)-2*Y(KY)+Y(KY-1)) - R(K-1)/2)/P
   11 CONTINUE
      R(N+KSTART) = 0.0E0
      DO 12 KK = N-1, 2, -1
        K=KK+KSTART
        R(K) = Q(K)*R(K+1)+R(K)
   12 CONTINUE
      RETURN
      END
C ---------------------------------------------------------
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                  C
C                          S P L C O V                             C
C                                                                  C
C  FAST ONE-DIMENSIONAL EQUIDISTANT SPLINE INTERPOLATION FUNCTION. C
C                                                                  C
C  PARAMETERS:                                                     C
C                                                                  C
C  X   INTERPOLATION ARGUMENT (REAL), X = 1 FIRST DATA-POINT,      C
C      X = N LAST DATA-POINT. OUTSIDE THE RANGE LINEAR EXTRA-      C
C      POLATION IS USED.                                           C
C                                                                  C
C  Y   REAL*8 ARRAY, 1 .. N : DATA VALUES                          C
C                                                                  C
C  R   DO: SPLINE MOMENTS CALCULATED BY SUBROUTINE 'ISPCOV'        C
C                                                                  C
C  PROGRAMMER:                                                     C
C  RENE FORSBERG, JUNE 1983, MODIFIED OCT 87 BY C.C.TSCHERNING     C
C                                                                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      FUNCTION SPLCOV(X, NTAB, NN)
C
      IMPLICIT REAL*8(A-H,P-Z)
      LOGICAL LTABH
      COMMON /TABELC/Y(12800),CTTF(200),CTSF(20),SZ(30),AX(18),
     *MAXB(20),IX(8),IIX(17),IOLD
      COMMON /CTABH/R(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH, NTABH(15,5,5),NHE,NSTART,LTABH
C
      N=NINTH+2
      KY0=(NTAB+NN-1)*N
      KY1=KY0+1
      KSTART=N*(NN-1)
      IF(X.GE.1.0E0) GO TO 1
        SPLCOV = Y(KY1) + (X-1)*(Y(2+KY0)-Y(KY1)-R(2+KSTART)/6)
      RETURN
    1 IF(X.LE.FLOAT(N)) GO TO 2
        SPLCOV = Y(N+KY0)+(X-N)*(Y(N+KY0)-Y(KY0+N-1)+R(KSTART+N-1)/6)
      RETURN
    2   J = IFRAC(X)
        XX = X - J
        SPLCOV = Y(J+KY0) +
     .   XX * ((Y(J+KY1)-Y(J+KY0)-R(J+KSTART)/3-R(J+1+KSTART)/6) +
     .     XX * (R(J+KSTART)/2 +
     .     XX * (R(J+KSTART+1)-R(J+KSTART))/6))
      RETURN
      END
      SUBROUTINE ICMEAN(BSIZE,STEP,COSST,SINST,COSLAT,SINLAT,LEQANG)
C PROGRAMMED BY C.C.TSCHERNING, GEODETIC INSTITUTE, NOV 1985.
C THE SUBROUTINE INITIALIZES STEP VARIABLES FOR MEAN VALUE
C COMPUTATION.
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE THE FOLLOWING STATEMENT:
      IMPLICIT REAL *8(A-H,O-Z), LOGICAL(L)
      LOGICAL LEQANG
      BSIZEA=BSIZE
      IF (LEQANG) GO TO 10
      STEP=2*BSIZE/5.0
      BSIZEA=BSIZEA/(COSLAT* COS(STEP)+SINLAT* SIN(STEP))
   10 STEP=BSIZEA/5.0
      COSST= COS(STEP)
      SINST= SIN(STEP)
      RETURN
      END
      FUNCTION COMEAN(SM,IS,ISP,COSLAP,SINLAP,COSLOP,SINLOP,
     *COSLAQ,SINLAQ,COSLOQ,SINLOQ,NSTEPP,NSTEPQ,LTABLE)
C PROGRAMMED NOV 1985 BY C.C.TSCHERNING, GEODETIC INSTITUTE.
C THE SUBROUTINE COMPUTES MEAN VALUES OF COVARIANCES.
      IMPLICIT REAL *8 (A-H,O-Z), LOGICAL (L)
      LOGICAL LOCAL,LSUM,LTABLE
      COMMON /CMEAN/STEPN,COSSTN,SINSTN,STEPE,COSSTE,SINSTE
      COMMON /CMEAQ/STEQN,COSSQN,SINSQN,STEQE,COSSQE,SINSQE
      COMMON /CMCOV/CCI(24),CCR(56),SI(2400),HCMAX,CCV(4),
     *DC(36),KVI(39),LOCAL,LSUM
      DIMENSION SM(3),COVME(4)
C
      IF ( ABS(SINLAP-SINLAQ).GT.1.0E-8.OR. ABS(SINLOP-SINLOQ)
     *.GT.1.0E-8) GO TO 2999
      COSSQN=COSSTN
      COSSQE=COSSTE
      SINSQN=SINSTN
      SINSQE=SINSTE
C
 2999 COVM=0.0E0
      DO 3000 I=1,4
 3000 COVME(I)=0.0E0
C
      COLAP=COSLAP
      SILAP=SINLAP
C
      DO 3043 MLAP=1,NSTEPP
      CCR(4)=SILAP
      CCR(6)=COLAP
      COLOP=COSLOP
      SILOP=SINLOP
C
      DO 3044 MLOP=1,NSTEPP
      COLAQ=COSLAQ
      SILAQ=SINLAQ
C
      DO 3045 MLAQ=1,NSTEPQ
      COLOQ=COSLOQ
      SILOQ=SINLOQ
      CCR(5)=SILAQ
      CCR(7)=COLAQ
C
      DO 3046 MLOQ=1,NSTEPQ
      COSDLO=COLOP*COLOQ+SILOP*SILOQ
      T=SILAQ*SILAP+COLAP*COLAQ*COSDLO
      IF (T.GT.1.0E0) T=1.0E0
      CCR(9)=COSDLO
      CCR(8)=-SILOP*COLOQ+COLOP*SILOQ
      CCR(1)=T
      IF (.NOT.LTABLE) CALL COVCX(SM,COV,IS)
      IF (LTABLE) COV=COVCG(SM,ISP,.FALSE.)
      DO 3001 I=1,4
 3001 COVME(I)=COVME(I)+CCV(I)
      COVM=COVM+COV
C
      COLOQ1=COLOQ
      COLOQ=COLOQ*COSSQE-SILOQ*SINSQE
 3046 SILOQ=SILOQ*COSSQE+COLOQ1*SINSQE
C
      COLAQ1=COLAQ
      COLAQ=COLAQ*COSSQN+SILAQ*SINSQN
 3045 SILAQ=SILAQ*COSSQN-COLAQ1*SINSQN
C
      COLOP1=COLOP
      COLOP=COLOP*COSSTE-SILOP*SINSTE
 3044 SILOP=SILOP*COSSTE+COLOP1*SINSTE
C
      COLAP1=COLAP
      COLAP=COLAP*COSSTN+SILAP*SINSTN
 3043 SILAP=SILAP*COSSTN-COLAP1*SINSTN
C
      J=(NSTEPP*NSTEPQ)**2
      DO 3003 I=1,4
 3003 CCV(I)=COVME(I)/J
      COMEAN=COVM/J
C
      RETURN
      END
      SUBROUTINE INTABH(SM,IS,LTEST)
C PROGRAMMED SEPT 1987 BY C.C.TSCHERNING. LATEST CHANGE 4 DEC 87.
C
C THE SUBROUTINE INITIALIZES TABELS FOR COVARIANCE-FUNCTION
C INTERPOLATION FOR FIXED HEIGHTS AND FUNCTIONALS.
C
C CALL VALUES:
C SM, IS PARAMETERS USED BY COVBX AND COVCX. SM IS A DUMMY
C REAL ARRAY WITH AT LEAST 3 ELEMENTS AND IS IS THE SUBSCRIPT
C OF THE FIRST ELEMENT USED IN SIGMA0 AND SIGMA, WHICH HOLDS
C THE DEGREE-VARIANCE CORRECTIONS. (SEE COVAX).
C
C OTHER CALL VALUES ARE STORED IN COMMON BLOCK CTABH:
C HTA  - HOLD THE UP TO 5 FIXED HEIGHTS IN METERS,
C SIZEI- THE INTERVAL SIZE IN ARCSECONDS (AT CALL),
C NFU  - THE NUNBER OF FIXED FUNCTIONALS FOR EACH FIXED HEIGHT,
C KEYH - THE FUNCTIONAL TYPES (0 - 15), SEE COVAX,
C NINTH- NUMBER OF INTERVALS IN TABLE,
C NHE  - NUMBER OF FIXED HEIGHTS.
C
C RETURN VALUES:
C IN CHTA THE COVARIANCE TABLES,
C TMAX  - THE MAXIMAL VALUE OF T=COS(SPHERICAL DISTANCE)
C NTABH - THE LOGICAL TABLE NUMBER FOR EACH HEIGHT AND
C         AND FUNCTIONAL. THERE WILL NORMALLY BE SEVERAL
C         TABLES FOR EACH FUNCTIONAL, SUCH AS BOTH THE FIRST,
C         SECOND AND THIRD DERIVATIVE WITH RESPECT TO T.
C SIZEI - NOW IN UNITS OF RADIANS.
C
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE THE FOLLOWING:
      IMPLICIT REAL *8(A-H,O-Z)
      LOGICAL LTABH,LOCAL,LSUM,LOLDFU,LTEST,LT,LF
      COMMON /CMCOV/CCI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CCV(2,2),D(36),KI(37),NC1,N2,LOCAL,LSUM
C CMCOV CONTAINS VARIABLES USED BY COVAX, COVBX AND COVCX.
      COMMON /TABELC/CHTA(12800),CTTF(200),CTSF(20),SZ(30),AX(18),
     *MAXB(20),IX(8),IIX(17),IOLD
C TABELC CONTAINS VARIABLES USED BY CTABLE AND COVCG.
      COMMON /CTABH/RC(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH,NTABH(15,5,5),NHE,NSTART,LTABH
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,I1,JJD,N3,KK,KQ,KP,ND,NR,ND1,
     *ND2
C DDY CONTAINS VARIABLES USED BY COVBX AND COVCX. HERE ONLY ND2
C EQUAL TO THE NUMBER OF DERIVATIVES WITH RESPECT TO T IS USED.
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GMC,LF,LT
      DIMENSION SM(3),TT(500)
C
      LTABH=LF
C CREATION OF TABLES. NTAB COUNTS NUMBER OF TABLES.
      NTAB=0
      SIZEI=SIZEI/RADSEC
      TMAX= COS(NINTH*SIZEI)
      NINTH1=NINTH+1
      NINTH2=NINTH1+1
      DO 210 I=1,NINTH1
  210 TT(I)= COS((I-1)*SIZEI)
C
      DO 300 I=1,NHE
      HP=HTA(I)
      CR(2)=HP
      JI=((I-1)*I)/2
C
      DO 301 J=1, I
      HQ=HTA(J)
      CR(3)=HQ
      DO 301 II=1,NFU(I)
      KI(6)=KEYH(II,I)
C IF THE FUNCTIONAL IS ONE OF A PAIR (LIKE A PAIR OF
C OF DEFLECTIONS) THE TABLE FOR ONLY ONE OF THE TWO IS MADE.
      IF (KI(6).GT.16) KI(6)=KI(6)-10
      IF (KI(6).EQ.13)KEYH(JJ,I)=15
      IF (KI(6).EQ.11)KEYH(JJ,I)=10
      IF (KI(6).EQ.7)KEYH(JJ,I)=6
C
      II1=II
      IF (I.NE.J) II1=NFU(J)
      DO 302 JJ=1,II1
      KI(7)=KEYH(JJ,J)
      IF (KI(7).GT.16) KI(7)=KI(7)-10
      CALL COVBX(SM,COV,IS)
C
C DEPENDING OF FUNCTIONAL TYPE, THE DERIVATIVES WITH RESPECT TO
C T FROM NSTART-2 TO ND2-2 MYST BE STORED, SEE COVCX.
      NSTART=2
      IF (ND1.EQ.1) GO TO 305
      LOLDFU=KP.EQ.12.OR.KP.EQ.14.OR.KQ.EQ.12.OR.KQ.EQ.14
      NSTART=3
      IF (LOLDFU) GO TO 305
      NSTART=4
      IF (KI(10).GT.1.AND.KI(11).GT.1.OR.ND2.EQ.3) NSTART=3
  305 CONTINUE
      NTABH(JI+J,II,JJ)=NTAB
      NTT=ND2-NSTART+1
C NTT IS TOTAL NUMBER OF DERIVATIVES WRT T, WHICH MUST BE STORED.
C
      DO 303 IK=1, NINTH1
      CR(1)=TT(IK)
      CALL COVCX(SM,COV,IS)
      IF (LTEST)WRITE(6,11)IK,CR(1),COV,(CR(NN+50+NSTART-1),NN=1,NTT)
   11 FORMAT(' IK,T,COV=',I3,F10.7,F9.3,/,5E14.7)
C
C THE CALL OF COVCX GIVES ALL DERIVATIVES, BUT NOT ALL NEED TO
C BE STORED.
      DO 304 NN=1,NTT
      CR50=CR(50+NN+NSTART-1)
      IF (IK.EQ.2) CHTA((NTAB+NN-1)*NINTH2+1)=CR50
  304 CHTA((NTAB+NN-1)*NINTH2+IK+1)= CR50
  303 CONTINUE
      IF (LTEST) WRITE(6,50)NTAB,ND2,NSTART,II,JJ,KI(6),KI(7)
   50 FORMAT(' NTAB,ND2,NSTART,II,JJ,KP,KQ=',7I4)
      NTAB=NTAB+ND2-NSTART+1
  302 CONTINUE
  301 CONTINUE
  300 CONTINUE
      LTABH=.TRUE.
      RETURN
      END
C ----------------------------------------------------------------
      SUBROUTINE TABH(C,LTA)
C PROGRAMMED BY C.C.TSCHERNING, SEPT 1987.
C
C THE SUBROUTINE INTERPOLATES IN A COVARIANCE FUNCTION TABLE
C USING SPLINES, AFTER FIRST HAVING CHECKED WHETHER THE NECESSARY
C TABLES ARE THE ONES CREATED. OTHERWISE COVCX IS CALLED.
C
C CALL VALUES:
C THE TABLE VALUES ARE STORED IN CHTA OF COMMON TABELC.
C THE VARIABLES OF COMMON CTABH AS INITIALIZED BY INTABH.
C
C CALL AND RETURN VARIABLES:
C IF THE SAME FIXED FUNCTIONALS AND HEIGHT AS IN LAST CALL
C ARE USED, THEN TABEL VALUES IN RC ARE USED FOR THE
C THE SPLINE INTERPOLATION. OTHERWISE THEY ARE COMPUTED BY
C ISPCOV.
C THE VARIABLES IN CTABH1 KEEPS TRACK OF THE LAST HEIGHT AND
C FUNCTIONAL TYPES USED.
C
C RETURN VARIABLES:
C C   - ARRAY CONTAINING THE DERIVATIVES WITH RESPECT TO T.
C LTA - LOGICAL, TRUE IF IT WAS POSSIBLE TO USE THE TABLES.
C       OTHERWISE COVCX WILL COMPUTE THE NEEDED QUANTITIES.
C
C IF DOUBLE PRECISION IS NEEDED, ACTIVE THE FOLLOWING:
      IMPLICIT REAL *8(A-H,O-Z)
C
      LOGICAL LTA,LTABH,LOCAL,LSUM,LSAHP,LSAHQ,LSAFP,LSAFQ,LSWI,
     *LOLDFU,LTEST,LF,LT
      COMMON /CTABH/RC(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH,NTABH(15,5,5),NHE,NSTART,LTABH
C SEE INTABH FOR DESCRIPTION OF VARIABLES.
      COMMON /CMCOV/CCI(24),CR(56),SIGMAO(1200),SIGMA(1200),HMAX,
     *CCV(2,2),D(36),KI(37),NC1,N2,LOCAL,LSUM
C SEE COVAX, COVBX AND COVCX FOR DESCRIPTION OF VARIABLES.
      COMMON /TABELC/CHTA(12800),CTTF(200),CTSF(20),SZ(30),AX(18),
     *MAXB(20),IX(8),IIX(17),IOLD
C CHTA CONTAINS THE TABLES.
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,II,JJ,N3,KK,KQ,KP,ND,
     *NR,ND1,ND2
C VARIABLES USED IN COVBX AND COVCX.
      COMMON /CTABH1/HPOLD,HQOLD,IHP,IHQ,KFP,KFQ,IFP,IFQ,NTAB,NN
C VARIABLES KEEPS TRACK OF LAST HEIGHTS AND FUNCTIONALS USED.
      COMMON /DCON/ D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GMC,LF,LT
C CONSTANTS INITIALIZED BY BLOCK DATA.
      DIMENSION C(6)
C
      LTEST=LF
      IF (T.LT.TMAX) GO TO 600
      NINTH1=NINTH+1
      NINTH2=NINTH1+1
      HP= CR(2)
      HQ= CR(3)
      KP=KI(6)
      IF (KP.EQ.7.OR.KP.EQ.11)KP=KP-1
      IF (KP.EQ.13)KP=15
      KQ=KI(7)
      IF (KQ.EQ.7.OR.KQ.EQ.11)KQ=KQ-1
      IF (KQ.EQ.13)KQ=15
      LSAHP =  ABS(HP-HPOLD).LT. 0.1
      LSAHQ =  ABS(HQ-HQOLD).LT. 0.1
      LSAFP=KP.EQ.KFP
      LSAFQ=KQ.EQ.KFQ
C
C CHECK, WHETHER WE STILL HAVE THE SAME HEIGHT AND FUNCTIONALS
C AS DURING THE LAST CALL.
      IF (LSAHP.AND.LSAHQ.AND.LSAFP.AND.LSAFQ) GO TO 500
C
C THEN FIND POINTERS TO ACTUAL HEIGHTS AND FUNCTIONALS.
      IF (LSAHP) GO TO 100
      IHP=0
  101 IHP=IHP+1
      IF (IHP.GT.NHE) GO TO 600
      IF ( ABS(HP-HTA(IHP)).GT.0.1) GO TO 101
      HPOLD=HP
C
  100 IF (LSAHQ) GO TO 102
      IHQ=0
  103 IHQ=IHQ+1
      IF (IHQ.GT.NHE) GO TO 600
      IF ( ABS(HQ-HTA(IHQ)).GT. 0.1) GO TO 103
      HQOLD=HQ
C
  102 LSWI=IHQ.GT.IHP
      IF (LSWI) JI=((IHQ-1)*IHQ)/2+IHP
      IF (.NOT.LSWI) JI= ((IHP-1)*IHP)/2+IHQ
C JI POINTS AT TABLE INDEXES.
C
      IFP=0
  104 IFP=IFP+1
      IF (IFP.GT.NFU(IHP)) GO TO 600
      IF (KP.NE.KEYH(IFP,IHP)) GO TO 104
      KFP=KP
      IFQ=0
  105 IFQ=IFQ+1
      IF (IFQ.GT.NFU(IHQ)) GO TO 600
      IF (KQ.NE.KEYH(IFQ,IHQ)) GO TO 105
      KFQ=KQ
C
      IF (LSWI.OR.IHP.EQ.IHQ.AND.IFP.LE.IFQ) NTAB=NTABH(JI,IFQ,IFP)
      IF (.NOT.(LSWI.OR.IHP.EQ.IHQ.AND.IFP.LE.IFQ)) NTAB=
     *                                           NTABH(JI,IFP,IFQ)
C
C FIND WHICH DERIVATIVES WRT T ARE STORED.
      NSTART=2
      IF (ND1.EQ.1) GO TO 110
      LOLDFU=KP.EQ.12.OR.KP.EQ.14.OR.KQ.EQ.12.OR.KQ.EQ.14
      NSTART=3
      IF (LOLDFU) GO TO 110
      NSTART=4
      IF (KI(10).GT.1.AND.KI(11).GT.1.OR.ND2.EQ.3) NSTART=3
  110 CONTINUE
C
      NN=ND2-NSTART+1
C CREATE TABLES NECESSARY FOR THE SPLINE INTERPOLATION.
      IF (LTEST)
     *WRITE(6,10)IHP,IHQ,IFP,IFQ,KFP,KFQ,NTAB,NSTART,ND2
   10 FORMAT(' IHP,IHQ,IFP,IFQ,KFP,KFQ,NTAB,NSTART,ND2=',9I3)
      DO 130 N=1,NN
  130 CALL ISPCOV(NTAB,N)
      KI(37)=KI(37)+1
      GO TO 502
C
  500 KI(36)=KI(36)+1
C
  502 T1= ABS(D1-T)
      IF (T1.LT.2.0E-10) PSI=0.0E0
      IF (T1.GE.2.0E-10) PSI=PI/2.0E0-ASIN(T)
      IF (PSI.LT.D0) PSI=D0
      X1=PSI/SIZEI+D2
C SPLINE INTERPOLATION OF ALL NEEDED DERIVATIVES WRT T.
      DO 501 N=1,NN
      COVS=SPLCOV(X1,NTAB,N)
  501 C(N+NSTART-1)=COVS
      IF (LTEST) WRITE(6,15)PSI*RADSEC,T,C(NSTART)*CCI(12)
   15 FORMAT(' PSI,T,COV=',F10.1,F13.10,E15.5)
      LTA=.TRUE.
      RETURN
C
  600 LTA=.FALSE.
      KI(35)=KI(35)+1
      RETURN
      END
C------------------------------------------------------------------
      SUBROUTINE COVAX(SM,COV,IS)
C ORIGINAL VERSION PROGRAMMED JULY 1975 BY C.C.TSCHERNING. LATEST
C MODIFICATION 24 SEP 1987.
C
C THIS SUBROUTINE PREPARES CONSTANTS USED FOR COVARIANCE FUNCTION EVALU-
C ATION, WHICH IS EXECUTED USING THE SUBROUTINES COVBX AND COVCX.
C
C THE COVARIANCE FUNCTION USED IS DEFINED ACCORDING TO A DEGREE-VARIANCE
C MODEL AND A SET OF EMPIRICAL (POTENTIAL) DEGREE-VARIANCES. THE DEGREE-
C VARIANCE MODEL IS SPECIFIED THROUGH THE VALUES OF KI(1)-KI(5),CI(8)-
C CI(10) AND THE PARAMETERS N1 AND LOCAL OCCURRING IN THE COMMON BLOCK
C /CMCOV/. EMPIRICAL ANOMALY DEGREE-VARIANCES WILL HAVE TO BE STORED IN
C SIGMA0 WHEN LOCAL IS FALSE, AND ARE USED FOR THE COMPUTATION OF RESI-
C DUAL POTENTIAL DEGREE-VARIANCES, (SEE REF(A), EQ.(16)).
C
C BY THE CALL OF COVAX, THE KIND OF COVARIANCE FUNCTION TO BE USED IS
C DETERMINED. THE VALUE OF KI(5) WILL DETERMINE THE DEGREE-VARI-
C ANCE MODEL (1,2 OR 3, CF.REF(A),EQ.(17)) THAT WILL BE USED. THE QUAN-
C TITIES K(2),K(3) MUST BE STORED IN KI(3),KI(4), AND BE EQUAL TO ZERO
C WHEN NOT USED (EG.,KI(3),KI(4) BOTH ZERO WHEN KI(5)=1). THE QUANTITY
C A(I) MUST BE STORED IN CI(8) IN UNITS OF (M/SEC)**4, AND THE SQUARE OF
C THE RATIO BETWEEN THE RADIUS OF THE BJERHAMMAR-SPHERE (RB) AND THE
C MEAN RADIUS OF THE EARTH (RE) MUST BE STORED IN CI(10).
C
C THERE ARE THEN THREE POSSIBILITIES:
C (1) ONE OF THE DEGREE-VARIANCE MODELS IS USED WITHOUT MODIFICATIONS.
C     THE SUMMATION LIMIT P OF REF.(A),EQ.(20) IS THEN FIXED TO 3.
C     BECAUSE THIS IS EQUIVALENT TO REQUIRING THE FIRST 3 DEGREE-VARIAN-
C     AREA /CMCOV/ MUST BE EQUAL TO 3 AND .TRUE., RESPECTIVELY.
C     CES TO BE ZERO, THE VARIABLES N1 AND LOCAL STORED IN THE COMMON
C (2) A NUMBER (N1) OF THE ANOMALY DEGREE-VARIANCES (DEGREE ZERO TO
C     N1-1) ARE PUT EQUAL TO EMPIRICAL DETERMINED QUANTITIES. THE ANO-
C     MALY DEGREE-VARIANCE OF DEGREE K WILL HAVE TO BE STORED IN
C     SIGMA0(IS+K+1) IN UNITS OF MGAL**2 WHEN CALLING COVAX. LOCAL MUST
C     BE EQUAL TO FALSE. COVAX WILL CONVERT THE ANOMALY DEGRE5-VARIANCES
C     INTO POTENTIAL DEGREE-VARIANCES. THE POINTER IS MUST BE POSITIVE.
C (3) THE N1 FIRST DEGREE-VARIANCES (DEGREE 0 - N1-1) ARE EQUAL TO ZERO.
C     THIS MEANS, THAT THE VALUES OF A (N1-1)-ORDER LOCAL COVARIANCE
C     FUNCTION WILL BE COMPUTED. LOCAL MUST HAVE THE VALUE .TRUE..
C IN ALL CASES N1 MUST BE LESS THAN 300.
C
C THE COVARIANCES WILL GENERALLY BE COMPUTED BY CLOSED EXPRESSIONS, BUT
C THEY MAY IN CERTAIN CASES BE USELESS IN BIG ALTITUDES OF NUMERICAL
C REASONS, CF. REF(A), SECTION 4. IN THEESE CASES MUST THE LOGICAL VARI-
C ABLE LSUM BE TRUE AND THE VARIABLE HMAX MUST HAVE ASSIGNED A VALUE
C EQUAL TO THE CRITICAL ALTITUDE. WHEN LSUM IS TRUE AND THE HEIGHT OF
C P OR Q IS GREATHER THAN HMAX, WILL THE SERIES REF(A), EQ.(16), ABBRE-
C VIATED TO DEGREE N2-1 BE USED FOR THE COMPUTATION OF THE COVARIANCES.
C THE VALUES OF LSUM, N2 AND HMAX WILL (IN THE SAME WAY AS FOR THE PARA-
C METERS SPECIFYING THE DEGREE-VARIANCE MODEL) BE TRANSFERRED TO COVAX
C THROUGH THE COMMON AREA /CMCOV/, BUT AN ARRAY SM IS TRANSFERRED AS A
C PARAMETER IN THE CALL IN ORDER TO ENABLE VARIABLE DIMENSIONING (SPECI-
C FIED BY THE VARIABLE N2 IN /CMCOV/).
C
C THE CALL OF COVAX WILL ALSO INITIALIZE CERTAIN VARIABLES USED IN
C SUBSEQUENT COMPUTATIONS.
C
C REFERENCES:
C (A) TSCHERNING,C.C.: COVARIANCE EXPRESSIONS FOR SECOND AND LOWER ORDER
C     DERIVATIVES OF THE ANOMALOUS POTENTIAL, REPORTS OF THE DEP. OF
C     GEODETIC SCIENCE NO. 225,1976.
C (B) TSCHERNING,C.C. AND R.H.RAPP: CLOSED COVARIANCE EXPRESSIONS
C     FOR GRAVITY ANOMALIES, GEOID UNDULATIONS, AND DEFLECTIONS OF
C     THE VERTICAL IMPLIED BY ANOMALY DEGREE-VARIANCE MODELS. DEP-
C     ARTMENT OF GEODETIC SCIENCE, THE OHIO STATE UNIVERSITY,
C     REPORT NO. 208, 1974.
C (C) KRARUP, T. AND C.C.TSCHERNING: EVALUATION OF ISOTROPIC COVARIANCE
C     FUNCTIONS OF TORSION BALANCE OBSERVATIONS. BULLETIN GEOD-
C     DESIQUE, VOL. 58, NO. 2, PP. 180-192, 1984.
C (D) TSCHERNING,C.C.: IMPLEMENTATION OF ALGOL-PROCEDURES FOR COV-
C     ARIANCE COMPUTATION ON THE RC 4000-COMPUTER. THE DANISH
C     GEODETIC INSTITUTE INTERNAL REPORT NO. 12, 1976.
C
C IF DOUBLE PRECISION IS NEEDED ACTIVATE:
      IMPLICIT REAL *8(A-H,O-Z), LOGICAL (L)
C AND USE DSIN, DCOS, DLOG, DSQRT, DFLOAT BELOW.
C
      LOGICAL LOCAL,LSUM,LF,LT
      COMMON /CMCOV/CI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CV(2,2),D(36),KI(37),N1,N2,LOCAL,LSUM
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GM,LF,LT
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,II,JJ,N3,KK,KQ,KP,ND,NR,ND1,ND2
C THE COMMON BLOCK CONTAINS THE VALUES OF PARAMETERS USED FOR THE COM-
C PUTATIONS AND RETURN VALUES OF FUNCTIONS AND CONSTANTS, WHICH HAVE
C BEEN USED IN THE COMPUTATIONS.
C PARAMETERS USED FOR THE COMPUTATIONS:
C   CI(8) = THE CONSTANT A(I) OF REF.(A), EQ.(17) IN UNITS OF (M/SEC)**4
C   CI(10) THE SQUARE OF THE RATIO BETWEEN THE BJERHAMMAR-SPHERE RADIUS
C   (RB) AND THE MEAN RADIUS OF THE EARTH (RE), OR IF NEGATIVE RB-RE,
C   (CHANGE MADE 3 JULY 1985).
C   SIGMA0(IS+1)-SIGMA0(IS+N1) MUST CONTAIN THE EMPIRICAL ANOMALY
C   DEGREE VARIANCES IN UNITS OF MGAL**2.
C   KI(3) = K(2) OF DEG.VAR. MODEL 2 OR 3,
C   KI(4) = K(3) OF DEG.VAR. MODEL 3, CF. REF.(A), EQ.(17).
C   KI(5) = THE DEG.VAR. MODEL NUMBER, (EQUAL TO 1, 2 OR 3),
C   N1 = THE NUMBER OF EMPIRICAL DEGREE-VARIANCES USED (LOCAL =.FALSE.)
C   OR (ORDER+1) OF THE LOCAL COVARIANCE FUNCTION USED (LOCAL=.TRUE.).
C   HMAX, N2, LSUM. HMAX IS THE HEIGHT ABOVE WHICH THE LEGENDRE SERIES
C   OF MAXIMAL DEGREE N2-1 WILL BE USED FOR THE COMPUTATION OF THE CO-
C   VARIANCES WHEN LSUM IS TRUE. N2 MUST BE GREATHER THAN 2 AS WELL AS
C   GREATHER THAN N1.
C RETURN VALUES:
C   CI(10) RB-RE, A NEGATIVE VALUE (MODIFICATION 3 JULY 1985).
C   CI(9) = RB**2.
C
      DIMENSION SM(3)
C THE ARRAY SM IS USED TO STORE THE DEGREE-VARIANCES WHEN THE LOGICAL
C VARIABLE LSUM IS TRUE. IN CASE THE SUBSCRIPT LIMIT IS CHANGED IS IT
C NECESSARY TO CHANGE THE VALUE OF THE VARIABLE N2 ACCORDINGLY.
C
      KT = KI(5)
      KT1 = KT+1
      IF (KT.GE.3) GO TO 15
      DO 16 K = KT, 2
   16 KI(K+2) = D0
   15 KI(1) = -2
      KI(2) = -1
C
      IF ((KT.LT.3).OR.(KT.EQ.3.AND.KI(4).GT.KI(3))) GO TO 17
C ASSURING, THAT KI(4).GT.KI(3), BECAUSE THIS FACT IS USED IN SUB-
C SEQUENT COMPUTATIONS.
      K = KI(3)
      KI(3) = KI(4)
      KI(4) = K
   17 II = KI(3)
      JJ = KI(4)
      SM(1) = D0
      SM(2) = D0
C     N3 = N1
      A = CI(8)
      S = CI(10)
      IF (S.GT.D0) GO TO 40
C S IS HERE RB-RE, A NEGATIVE VALUE. (MODIFICATION 3 JULY 1985).
      RB=RE+S
      RB2=RB*RB
      S=RB2/(RE*RE)
      GO TO 41
   40 RB2 = S*(RE**2)
      CI(10)=RE*( SQRT(S)-D1)
   41 CI(9) = RB2
      RB2 = RB2*1.0E-10
      T = D0
C
      SIGMA0(IS+1) = D0
      SIGMA0(IS+2) = D0
      IF (LOCAL) SIGMA0(IS+3) = D0
      IF (.NOT.LOCAL) SIGMA0(IS+3) = SIGMA0(IS+3)*RB2/S**4
      IF (N1.LT.4) GO TO 14
      DO 13 K = 4, N1
      IF (.NOT.LOCAL) T = SIGMA0(IS+K)*S**(-K-1)*RB2
      GO TO (10,11,12),KT
   10 KK = 1
      GO TO 13
   11 KK = K+II-1
      GO TO 13
   12 KK = (K+II-1)*(K+JJ-1)
   13 SIGMA0(IS+K) = (T-A*(K-2)/((K-3)*KK))/(K-2)**2
   14 RETURN
      END
C ------------------------------------------------------------------
      SUBROUTINE COVBX(SM,COV,IS)
C ORIGINAL VERSION PROGRAMMED JULY 1975 BY C.C.TSCHERNING AS A SUB-
C ENTRY OF COVAX. NEW VERSION CREATED SEP 1987 BY CCT.
C
C THE CALL OF COVBX WILL FIX CERTAIN CONSTANTS USED FOR THE COMPUTA-
C TIONS, WHICH ARE INDEPENDENT OF THE POINTS P AND Q. WHEN COVBX IS CAL-
C LED, THE KIND OF QUANTITIES BETWEEN WHICH THE COVARIANCE IS TO BE
C COMPUTED MUST BE SPECIFIED.  THIS IS DONE BY STORING IN KI(6) AND
C KI(7) INTEGERS EQUAL TO THE EQUATION NUMBERS OF REF.A, EQ.(1) - (9)
C (12) AND (14), AND 10, 11, 13, 15 CORRESPONDING TO REF.(C), EQ.
C (3) - (6). HOWEVER, THE QUANTITY OF KIND 2 IS NOW THE GRAVITY
C DISTURBANCE (CHANGED FROM THE SAME QUANTITY DIVIDED BY R).
C
C REFERENCES (A) - (D): SEE COVAX.
C
C IF DOUBLE PRECISION IS NEEDED ACTIVATE:
      IMPLICIT REAL *8(A-H,O-Z), LOGICAL (L)
C AND USE DSIN, DCOS, DLOG, DSQRT, DFLOAT BELOW.
C
      LOGICAL LOCAL,LSUM,LN,L,LF,LT
      COMMON /CMCOV/CI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CV(2,2),D(36),KI(37),N1,N2,LOCAL,LSUM
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GM,LF,LT
      COMMON /DDX/K7(15),K9(15),K11(15),K13(15),K15(15),K17(15),K19(15),
     *K21(15),K23(15),K8(15),C11(15),J2(2),I3(2),I4(2),LN(7),L(7)
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,II,JJ,N3,KK,KQ,KP,ND,NR,ND1,ND2
C THE COMMON BLOCK CONTAINS THE VALUES OF PARAMETERS USED FOR THE COM-
C PUTATIONS AND RETURN VALUES OF FUNCTIONS AND CONSTANTS, WHICH HAVE
C BEEN USED IN THE COMPUTATIONS.
C PARAMETERS USED FOR THE COMPUTATIONS:
C   CI(8) = THE CONSTANT A(I) OF REF.(A), EQ.(17) IN UNITS OF (M/SEC)**4
C   CI(10) THE SQUARE OF THE RATIO BETWEEN THE BJERHAMMAR-SPHERE RADIUS
C   (RB) AND THE MEAN RADIUS OF THE EARTH (RE), OR IF NEGATIVE RB-RE,
C   (CHANGE MADE 3 JULY 1985).
C   CI(13) USER DEFINED VALUE OF CI(11). CI(14), CI(15) USER DEFINED
C   VALUES OF CI(21) - CI(24).
C   SIGMA0(IS+1)-SIGMA0(IS+N1) MUST CONTAIN THE POTENTIAL ANOMALY
C   DEGREE-VARIANCE CORRECTIONS, CF. REF.(A), EQ.16.
C   KI(3) = K(2) OF DEG.VAR. MODEL 2 OR 3,
C   KI(4) = K(3) OF DEG.VAR. MODEL 3, CF. REF.(A), EQ.(17).
C   KI(5) = THE DEG.VAR. MODEL NUMBER, (EQUAL TO 1, 2 OR 3),
C   KI(6),KI(7) THE INTEGER SPECIFYING THE KIND OF QUANTITY WHICH IS
C   ASSOCIATED WITH P, Q, RESPECTIVELY,
C   KI(26) - KI(34) USER SPECIFIED VALUES FOR KI(10) - KI(23).
C   KI(35) - KI(37) USED BY SUBROUTINE COVCG FOR STATISTICAL PURPOSES.
C   N1 = THE NUMBER OF EMPIRICAL DEGREE-VARIANCES USED (LOCAL =.FALSE.)
C   OR (ORDER+1) OF THE LOCAL COVARIANCE FUNCTION USED (LOCAL=.TRUE.).
C   HMAX, N2, LSUM. HMAX IS THE HEIGHT ABOVE WHICH THE LEGENDRE SERIES
C   OF MAXIMAL DEGREE N2-1 WILL BE USED FOR THE COMPUTATION OF THE CO-
C   GREATHER THAN N1.
C RETURN VALUES:
C   CI(1)-CI(7), THE QUANTITIES C(J,Q) OF REF.(A), EQ.(47), WITH
C   CI(1) - CI(KI(5)+1) = C(J,Q), CI(5) = C(KI(5)+2,Q),
C   CI(6) = C(KI(5)+3,Q), CI(7) = C(KI(5)+4,Q),
C   CI(11),CI(12) QUANTITIES USED TO GIVE THE COMPUTED
C   COVARIANCES THE PROPER UNITS.
C   CI(21) - CI(24) THE QUANTITIES M(1) - M(4) OF REF.(A) EQ. (26) -
C   (29). (CHANGE MADE 1986.10.20).
C   SIGMA(IS+4) - SIGMA(IS+N1), THE POTENTIAL DEGREE-VARIANCES MULTI-
C   PLIED BY THE FACTORS GIVEN IN REF.(A), TABLE 1.
C   SIGMA(IS+1) - SIGMA(IS+3), THE DEGREE-VARIANCES OF DEGREE 0,1,2
C   MINUS TERMS OF THE SAME DEGREES ACQUIRED FROM REF.(A), EQ.(34),(35),
C   (41) AND (42).
C   KI(8),KI(9) THE NUMBER OF DIFFERENTIATIONS IN RADIAL DIRECTION AND
C   WITH RESPECT TO T = COS(SPHERICAL DIST.) TO BE PERFORMED.
C   KI(10) - KI(15) THE CONSTANTS I,K,J,M,J1,M1 OF REF.(A), SECTION 2.
C   KI(16) - KI(19) THE QUANTITIES M(1) - M(4) OF REF.(A), EQ.(26)-(29).
C   KI(20),KI(21) THE EXPONENT OF THE REFERENCE GRAVITY,
C   KI(22),KI(23) THE EXPONENT OF THE RADIAL DISTANCE AND
C   KI(24),KI(25) SUBSCRIPTS OF THE RESULT STORED IN CV (COMMON CMCOV).
C
      DIMENSION SM(3)
C THE ARRAY SM IS USED TO STORE THE DEGREE-VARIANCES WHEN THE LOGICAL
C VARIABLE LSUM IS TRUE. IN CASE THE SUBSCRIPT LIMIT IS CHANGED IS IT
C NECESSARY TO CHANGE THE VALUE OF THE VARIABLE N2 ACCORDINGLY.
C
C THE ARRAYS K7 - K23 CONTAINS TABLES OF QUANTITIES RELATED TO THE KIND
C OF COVARIANCES (1 - 14) WHICH MAY BE COMPUTED. THEIR ACTUAL VA-
C LUES WILL AFTER CALL OF COVBX BE STORED IN THE ELEMENTS OF THE ARRAY
C KI HAVING SUBSCRIPTS 8 - 25.
C K7 CONTAINS THE ORDER OF DIFFERENTIATION WITH RESPECT TO T,K8 THE
C ORDER OF DIFFERENTIATION WITH RESPECT TO THE RADIUS, CF.REF(A),TABLE
C 1. K9,K11,K13 THE KIND OF DIFFERENTIATIONS TO BE COMPUTED WITH RESPECT
C TO THE LATITUDE (2) AND THE LONGITUDE (3), CF.REF(A),SECTION 3. K15
C AND K17 CONTAINS AN INTEGER, WHICH WILL BE ADDED TO THE DEGREE. THE
C SUM WILL THEN BE MULTIPLIED WITH THE DEGREE-VARIANCE OF THE CORRESPON-
C DING DEGREE WHEN A FIRST AND/OR SECOND DIFFERENTIATION WITH RESPECT
C TO THE RADIAL DISTANCE HAS TAKEN PLACE.
C C11 CONTAIN QUANTITIES USED TO GIVE THE COVARIANCES THE PROPER UNITS.
C
      RB2 = CI(9)
      A = CI(8)
      II=KI(3)
      JJ=KI(4)
      KT=KI(5)
      KT1=KT+1
      N3=N1
      CI(11) = D1
      KI(8)=0
      KI(9)=0
      IF (KI(6).GT.16.OR.KI(7).GT.16) GO TO 19
C
      DO 20 M = 1, 2
      K = KI(M+5)
C FOR M = 1, K IS EQUAL TO THE KIND EVALUATED IN P AND FOR M = 2 EQUAL
C TO THE KIND EVALUATED IN Q.
C
      IF (K.EQ.0.OR.K.EQ.16) GO TO 42
      KI(M+9) = K9(K)
      KI(M+11) = K11(K)
      KI(M+13) = K13(K)
      CI(M+20) = K15(K)
      CI(M+22) = K17(K)
      KI(M+19) = K19(K)
      KI(M+21) = K21(K)
      KI(M+23) = K23(K)
C
      CI(11) = CI(11)*C11(K)
      KI(8)=KI(8)+K7(K)
      KI(9)=KI(9)+K8(K)
      GO TO 20
C
C USER DEFINED VALUES OF KI AND CI. MAY BE USER FOR DENSITY CONTRAST
C COVARIANCES, CF. REF.(D), SECTION 3.
   42 DO 43 MK=1,8
   43 KI(M+MK*2+7)=KI(MK+25)
      CI(11) = CI(11)*CI(13)
      CI(M+20) = CI(14)
      CI(M+22) = CI(15)
      KI(8)=KI(8)+KI(29)
      KI(9)=KI(9)+KI(30)
   20 CONTINUE
C
      KQ = K
      KP = KI(6)
   19 ND = KI(8)
      NR = KI(9)
C ND AND NR ARE THE NUMBER OF DIFFERENTIATIONS WITH RESPECT TO T AND
C THE RADIAL DISTANCES, RESPECTIVELY.
C
C UPDATING THE DEGREE-VARIANCES, CF. REF(A), TABLE 1.
      SIGMA(IS+1) = D0
      SIGMA(IS+2) = D0
      IF (LSUM) N1 = N2
      DO 21 M = 3, N1
      B = D1
      DO 22 I = 1, 4
   22 IF ( ABS(CI(I+20)).GT.0.0) B = B*(M+CI(I+20)-1)
      IF (M.LE.N3) SIGMA(IS+M) = SIGMA0(IS+M)*B
      IF (.NOT.LSUM.OR.M.EQ.3) GO TO 21
      DO 48 K = 1, KT1
   48 B = B/(M+KI(K)-1)
C STORING THE MODIFIED DEGREE-VARIANCES OF DEGREE M-1 IN SM(M) AND AD-
C DING THE DEGREE-VARIANCE CORRECTIONS FOR M .LE. N3.
      SM(M) = B*A
      IF (M.LE.N3)  SM(M) = SM(M)+SIGMA(IS+M)
   21 CONTINUE
      IF (N1.GT.2) SM(3) = SIGMA(IS+3)
      IF (LSUM) N1 = N3
C
C EVALUATION OF THE QUANTITIES C(J,NR), CF.REF(A), TABLE 2.
      DO 23 K = 1, 7
   23 CI(K) = D0
C
      DO 25 K = 1, KT1
      CI(K) = D1
      DO 25 KQ = 1, KT1
   25 IF (K.NE.KQ) CI(K) = CI(K)/(KI(KQ)-KI(K))
C CF.,EQ.(19). WE WILL THEN COMPUTE THE QUANTITIES GIVEN IN REF(A)
C REF(A), TABLE 2.
      IF (NR.LT.2) GO TO 29
      RKP = CI(21)+CI(22)+CI(23)+CI(24)
      IF (NR.EQ.4) REM = CI(21)*(CI(22)+CI(23)+CI(24))+CI(22)
     *                 *(CI(23)+CI(24))+CI(23)*CI(24)
C
      GO TO (26,27,28),KT
   26 CI(NR+3) = D1
      IF (NR.GT.2) CI(NR+2) = RKP+3
      IF (NR.EQ.4) CI(NR+1) = REM+3*RKP+7
      GO TO 29
   27 IF (NR.GT.2) CI(NR+2) = D1
      IF (NR.EQ.4) CI(NR+1) =-KI(3)+3+RKP
      GO TO 29
   28 IF (NR.EQ.4) CI(NR+1) = D1
   29 IF (NR.EQ.0) GO TO 31
C
      DO 30 KP = 1, 4
      DO 30 K  = 1, KT1
   30 IF ( ABS(CI(KP+20)).NE.0.0) CI(K) = CI(K)*(CI(KP+20)-KI(K))
C
C THE LOGICAL ARRAYS L AND LN REGISTER WHICH TERMS THAT WILL HAVE TO
C BE EVALUATED , RESPECTIVELY NOT EVALUATED IN REF.(A), EQ. (47).
   31 DO 38 K = 1, 7
      L(K) =  ABS(CI(K)).GT.1.0E-15
   38 LN(K) = .NOT.(L(K))
C
      DO 32  K = 3, 7
      DO 32  M = 1, 3
      IF (M.EQ.1.AND.K.GT.5.OR.(M+KI(K)-1).EQ.0.AND.K.LT.5.OR.LN(K))
     *GO TO 32
      GO TO (34,34,35,35,34,36,37),K
   34 B = D1
      GO TO 33
   35 B = D1/(M+KI(K) -1)
      GO TO 33
   36 B = (M-1)
      GO TO 33
   37 B = (M-1)*(M-1)
   33 SIGMA(IS+M) = SIGMA(IS+M)-A*CI(K)*B
   32 CONTINUE
      SIGMA(IS+3) = SIGMA(IS+3)-A*CI(2)
C
      ND1 = ND+1
      ND2 = ND1+1
      RETURN
      END
C ------------------------------------------------------------------
      SUBROUTINE COVCX(SM,COV,IS)
C ORIGINALLY PROGRAMMED JULY 1975 BY C.C.TSCHERNING AS A SUB-
C ENTRY TO COVAX. SEPARATE SUBROUTINE CREATED SEPT 1987 BY CCT.
C
C COMPUTATION OF THE COVARIANCE IN A SPECIFIC PAIR OF POINTS. THE
C VALUE IS RETURNED THROUGH THE PARAMETER COV.
C THE COVARIANCES COMPUTED WILL BE IN UNITS CORRESPONDING TO THE KIND
C OF QUANTITIES, I.E. FOR KIND (1) METERS, (2) EOTVOS (E), (3) MGAL,
C (4),(5) E, (6),(7) ARCSECONDS, (8) - (14) E.
C THE FOLLOWING QUANTITIES MUST BE STORED IN THE ELEMENTS OF THE ARRAY
C CR WHEN COVCX IS CALLED: (1) COSINE TO THE SPHERICAL DISTANCE BET-
C WEEN P AND Q, (2),(3) THE HEIGHT OF P, Q RESPECTIVELY, (4),(5) SINE
C OF THE LATITUDE THE  OF P, Q, RESPECTIVELY, (6),(7) COSINE OF THE
C LATITUDE OF P, Q, RESPECTIVELY, (8),(9) SINE AND COSINE OF THE
C LONGITUDE DIFFERENCE. THE REFERENCE GRAVITY WILL HAVE TO BE STORED
C IN CR(10),CR(11) FOR P, Q RESPECTIVELY (WHEN USED, OTHERWISE STORE
C 1.0).
C
C THE CALL OF COVCX WILL RESULT IN THE COMPUTATION OF THE COVARIANCE ,
C WHICH IS TRANSFERRED TO THE CALLING PROGRAM THROUGH THE VARIABLE COV.
C THE RESULT WILL ALSO BE TRANSFERRED IN THE COMMON CMCOV, BY THE ARRAY
C CV(2,2). IN CASE IT IS POSSIBLE TO COMPUTE MORE THAN ONE QUANTITY AT
C A TIME (I.E. WHEN DERIVATIVES WITH RESPECT TO T=COS(SPHERICAL DIST-
C TANCE) ARE COMPUTED, KINDS 6 - 11, 13 AND 15), THE COVARIANCE
C OF TYPE 6, 8, 10 AND 23 WILL BE STORED IN THE ELEMENT WITH SUBSCRIPT
C 2 AND OTHERWISE IN THE ELEMENT WITH SUBSCRIPT 1. THE KIND OF THE
C FUNCTIONALS IN P WILL DETERMINE THE VALUE OF THE FIRST SUBSCRIPT
C WHILE THE KIND OF THE FUNCTIONALS IN Q WILL DETERMINE THE SECOND
C SUBSCRIPT. EXAMPLE: KIND 6 IN P AND KIND 1 IN Q WILL DELIVER
C THE COVARIANCE BETWEEN THE PRIME-VERTICAL VERTICAL DEFLECTION AND
C AND THE HEIGHT ANOMALY IN CV(1,1), BETWEEN THE MERIDIAN VERTICAL
C DEFLECTIAN AND THE HEIGHT ANOMALY IN CV(2,1).
C
C INFORMATION RELATED TO THE COORDINATES OF P AND Q MUST BE STORED IN
C THE ARRAY CR WHEN COVCX IS CALLED, SEE BELOW.
C
C IF DOUBLE PRECISION IS NEEDED ACTIVATE:
      IMPLICIT REAL *8(A-H,O-Z), LOGICAL (L)
C
      LOGICAL LOCAL,LSUM,LSUMC,LOLDP,LOLDQ,LN,L,LF,LT,LTEST,LTABH
     *,LTA
      COMMON /CMCOV/CI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CV(2,2),D(36),KI(37),N1,N2,LOCAL,LSUM
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GM,LF,LT
      COMMON /DDX/K7(15),K9(15),K11(15),K13(15),K15(15),K17(15),K19(15),
     *K21(15),K23(15),K8(15),C11(15),J2(2),I3(2),I4(2),LN(7),L(7)
      COMMON /DDY/A,S,RB2,T,B,KT,KT1,K,II,JJ,N3,KK,KQ,KP,ND,NR,ND1,ND2
      COMMON /CTABH/RRC(1200),HTA(5),TMAX,SIZEI,NFU(5),KEYH(5,5),
     *NINTH,NTABH(15,5,5),NHE,NSTART,LTABH
C THE COMMON BLOCK CONTAINS THE VALUES OF PARAMETERS USED FOR THE COM-
C PUTATIONS AND RETURN VALUES OF FUNCTIONS AND CONSTANTS, WHICH HAVE
C BEEN USED IN THE COMPUTATIONS.
C PARAMETERS USED FOR THE COMPUTATIONS:
C   CI(8) = THE CONSTANT A(I) OF REF.(A), EQ.(17) IN UNITS OF (M/SEC)**4
C   CI(10) THE SQUARE OF THE RATIO BETWEEN THE BJERHAMMAR-SPHERE RADIUS
C   (RB) AND THE MEAN RADIUS OF THE EARTH (RE), OR IF NEGATIVE RB-RE,
C   (CHANGE MADE 3 JULY 1985).
C   CI(13) USER DEFINED VALUE OF CI(11). CI(14), CI(15) USER DEFINED
C   VALUES OF CI(21) - CI(24).
C   NEW VARIABLES ADDED MAY 1, 1986 AND NOV 1986:
C   CI(16) - CI(24), WHERE CI(20)=0.0 IF PRECISE FORMULAE FOR DERIVATIVES
C   MAY BE USED. IN THIS CASE IS CI(16)=SIN(LONGITUDE DIFFERENCE/2)**2,
C   CI(17)=SIN(LATITUDE DIFFERENCE/2), CI(18)=COS(LATITUDE DIFFERENCE),
C   CI(19)=COS(LATITUDE DIFFERENCE/2). OTHERWISE CI(20)=1.0.
C   CR(2),CR(3) THE HEIGHT OF P, Q, RESPECTIVELY, (UNITS METERS),
C   CR(4),CR(5) SINE OF THE LATITUDE OF P, Q, RESPECTIVELY,
C   CR(6),CR(7) COSINE OF THE LATITUDE OF P, Q, RESPECTIVELY,
C   CR(8),CR(9) SINE AND COSINE OF THE LONGITUDE DIFFERENCE,
C   CR(10),CR(11) THE REFERENCE GRAVITY IN P, Q, RESPECTIVELY (WHEN
C   USED, OTHERWISE STORE 1.0E0), (UNITS M/SEC**2).
C   KI(3) = K(2) OF DEG.VAR. MODEL 2 OR 3,
C   KI(4) = K(3) OF DEG.VAR. MODEL 3, CF. REF.(A), EQ.(17).
C   KI(5) = THE DEG.VAR. MODEL NUMBER, (EQUAL TO 1, 2 OR 3),
C   KI(6),KI(7) THE INTEGER SPECIFYING THE KIND OF QUANTITY WHICH IS
C   ASSOCIATED WITH P, Q, RESPECTIVELY,
C   KI(26) - KI(34) USER SPECIFIED VALUES FOR KI(10) - KI(23).
C   KI(35) - KI(37) USED BY SUBROUTINE COVCG FOR STATISTICAL PURPOSES.
C   N1 = THE NUMBER OF EMPIRICAL DEGREE-VARIANCES USED (LOCAL =.FALSE.)
C   OR (ORDER+1) OF THE LOCAL COVARIANCE FUNCTION USED (LOCAL=.TRUE.).
C   HMAX, N2, LSUM. HMAX IS THE HEIGHT ABOVE WHICH THE LEGENDRE SERIES
C   OF MAXIMAL DEGREE N2-1 WILL BE USED FOR THE COMPUTATION OF THE CO-
C   VARIANCES WHEN LSUM IS TRUE. N2 MUST BE GREATHER THAN 2 AS WELL AS
C   GREATHER THAN N1.
C RETURN VALUES:
C   CR(ND*8+12), THE VALUES OF THE ND'TH DERIVATIVE OF THE SUM OF THE
C   FINITE LEGENDRE-SERIES, CF.REF.(A), EQ.(20),(48) AND (52).
C   CR(ND*8+13) - CR(ND*8+19), THE VALUES OF THE ND'TH DERIVATIVES OF
C   THE FUNCTIONS F(-2), F(-1), F(KI(3)), F(KI(4)), S0, S1, S2, CF. REF.
C   (A), EQ. (42), (41), (39), (39), (30), (34) AND (35).
C   SIGMA0(IS+1) - SIGMA0(IS+N1) THE POTENTIAL DEGREE-VARIANCE
C   CORRECTIONS, CF. REF.(A), EQ.(16), (AFTER THE CALL OF COVAX).
C   SIGMA(IS+4) - SIGMA(IS+N1), THE POTENTIAL DEGREE-VARIANCES MULTI-
C   PLIED BY THE FACTORS GIVEN IN REF.(A), TABLE 1.
C   SIGMA(IS+1) - SIGMA(IS+3), THE DEGREE-VARIANCES OF DEGREE 0,1,2
C   MINUS TERMS OF THE SAME DEGREES ACQUIRED FROM REF.(A), EQ.(34),(35),
C   (41) AND (42).
C   KI(8),KI(9) THE NUMBER OF DIFFERENTIATIONS IN RADIAL DIRECTION AND
C   WITH RESPECT TO T = COS(SPHERICAL DIST.) TO BE PERFORMED.
C   KI(10) - KI(15) THE CONSTANTS I,K,J,M,J1,M1 OF REF.(A), SECTION 2.
C   KI(16) - KI(19) THE QUANTITIES M(1) - M(4) OF REF.(A), EQ.(26)-(29).
C   KI(20),KI(21) THE EXPONENT OF THE REFERENCE GRAVITY,
C   KI(22),KI(23) THE EXPONENT OF THE RADIAL DISTANCE AND
C   KI(24),KI(25) SUBSCRIPTS OF THE RESULT STORED IN CV (COMMON CMCOV).
C
      DIMENSION SM(3),CX(6,8),DC(6),
     *C(6),V(6),U(6),G(6),P(6),R(6),SS1(4),CZ(5),RM(6),Q(6)
C THE ARRAY SM IS USED TO STORE THE DEGREE-VARIANCES WHEN THE LOGICAL
C VARIABLE LSUM IS TRUE. IN CASE THE SUBSCRIPT LIMIT IS CHANGED IS IT
C NECESSARY TO CHANGE THE VALUE OF THE VARIABLE N2 ACCORDINGLY.
C
      EQUIVALENCE (CX(1,1),C(1)),(CX(1,2),V(1)),(CX(1,3),U(1)),
     *(CX(1,4),G(1)),(CX(1,5),P(1)),(CX(1,6),R(1)),(CX(1,7),SS1(1)),
     *(CX(2,8),SS2)
C K7 CONTAINS THE ORDER OF DIFFERENTIATION WITH RESPECT TO T,K8 THE
C ORDER OF DIFFERENTIATION WITH RESPECT TO THE RADIUS, GF.REF(A),TABLE
C 1. K9,K11,K13 THE KIND OF DIFFERENTIATIONS TO BE COMPUTED WITH RESPECT
C TO THE LATITUDE (2) AND THE LONGITUDE (3), CF.REF(A),SECTION 3. K15
C AND K17 CONTAINS AN INTEGER, WHICH WILL BE ADDED TO THE DEGREE. THE
C SUM WILL THEN BE MULTIPLIED WITH THE DEGREE-VARIANCE OF THE CORRESPON-
C DING DEGREE WHEN A FIRST AND/OR SECOND DIFFERENTIATION WITH RESPECT
C TO THE RADIAL DISTANCE HAS TAKEN PLACE.
C C11 CONTAIN QUANTITIES USED TO GIVE THE COVARIANCES THE PROPER UNITS.
C
      LTEST=LF
      T = CR(1)
      HP = CR(2)
      HQ = CR(3)
      SP = CR(4)
      SQ = CR(5)
      CP = CR(6)
      CQ = CR(7)
      SD = CR(8)
      CD = CR(9)
      RP = RE+HP
      RQ = RE+HQ
C IN HEIGH ALTITUDES AND WHEN LSUM IS TRUE WILL THE COVARIANCE BE COM-
C PUTED BY A SUMMATION OF THE LEGENDRE-SERIES ABBREVIATED TO DEGREE
C N2-1.
      LSUMC = LSUM .AND. (HP.GT.HMAX .OR. HQ.GT.HMAX)
C COMPUTATION OF THE CONSTANT USED TO CONVERT THE COVARIANCE INTO
C PROPER UNITS.
      CI(12) = CI(11)/(RP**KI(22)*RQ**KI(23)
     **CR(11)**KI(21)*CR(10)**KI(20))
C
      S = RB2/(RP*RQ)
C     IF(CI(10).LT.D0) S=D1-(RE*(HP+HQ+D2*(RE-CI(10)))+HP*HQ
C    *- (RE-CI(10))**2)/(RP*RQ)
      LOLDP = (KI(6).EQ.12) .OR. (KI(6).EQ.14)
      LOLDQ = (KI(7).EQ.12) .OR. (KI(7).EQ.14)
      IF (LSUMC) N1 = N3
C
C COMPUTATION OF THE QUANTITIES D(1)-D(36),CF.REF(A),SECTION 3.
C (MODIFIED ACCORDING TO REF.(C)).
      IF (ND.EQ.0) GO TO 55
C
      D(1) = D1
      CS = CP*SQ
      SC = SP*CQ
      SCC = SC*CD
      CC = CP*CQ
      CCS = CC*SD
      CSC = CS*CD
      IF (CI(20).GT.0.5) GO TO 201
C CF. REF.(D), EQ. (7) AND (8).
      D(2)= -D2*(CI(17)*CI(19)-SP*CQ*CI(16))
      D(7)= D2*(CI(17)*CI(19)+SQ*CP*CI(16))
      GO TO 202
 201  D(2) = CS-SCC
      D(7) = SC-CSC
202   CPSD = CP*SD
      CPCD = CP*CD
      CQSD = CQ*SD
      CQCD = CQ*CD
      D(3) = CQSD
      D(13)=-CPSD
C
      IF (ND.EQ.1) GO TO 55
      SS = SP*SQ
      D(8) = CC+SS*CD
C CF. REF.(D). EQ.(9).
      IF(CI(20).LT.0.5) D(8)=CI(18)-D2*SP*SQ*CI(16)
      D(9) = -SQ*SD
      D(14)= SP*SD
      D(15)= CD
      IF (LOLDP) GO TO 91
      D(4) = D(2)+D(3)
      D(6) = D(3)-D(2)
      GO TO 92
   91 D(4) = -T
      D(6) = -CQCD/CP
   92 IF (LOLDQ) GO TO 93
      D(19)= D(13)+D(7)
      D(31)= D(13)-D(7)
      GO TO 94
   93 D(19)= -T
      D(31)= -CPCD/CQ
C
   94 IF (ND.EQ.2) GO TO 55
      IF (LOLDP) GO TO 95
      D(10) = D(9)+D(8)
      D(12) = D(9)-D(8)
      D(16) = D(15)+D(14)
      D(18) = D(15)-D(14)
      GO TO 96
   95 D(10) = -D(7)
      D(12) = SQ*CD/CP
      D(16) = CPSD
      D(18) = SD/CP
   96 IF (LOLDQ) GO TO 97
      D(20) = D(14)+D(8)
      D(32) = D(14)-D(8)
      D(21) = D(15)+D(9)
      D(33) = D(15)-D(9)
      GO TO 98
   97 D(20) = -D(2)
      D(21) = -CQSD
      D(32) = SP*CD/CQ
      D(33) = -SD/CQ
C
   98 IF (ND.EQ.3) GO TO 55
      IF (.NOT.(LOLDP.AND.LOLDQ)) GO TO 99
      D(22) = T
      D(24) = CQCD/CP
      D(34) = CPCD/CQ
      D(36) = CD/CC
      GO TO 55
   99 IF (.NOT.LOLDQ) GO TO 100
      D(22) = D(21)+D(20)
      D(24) = D(21)-D(20)
      D(34) = D(33)+D(32)
      D(36) = D(33)-D(32)
      GO TO 55
  100 D(22) = D(16)+D(10)
      D(34) = D(16)-D(10)
      D(24) = D(18)+D(12)
      D(36) = D(18)-D(12)
   55 CONTINUE
C
      IF (LTABH) CALL TABH(C,LTA)
      IF (LTA.AND.LTABH) GO TO 204
      S2 = S*S
      ST = S*T
      T2 = T*T
      P2 = (D3*T2-D1)/D2
      P3 = (D3*ST+D1)/D2
C
C INITIALIZING ARRAY ELEMENTS. NOTE THE USE OF THE EQUIVALENCING.
      DO 50  K = 1, 8
      DO 50 M = 1, ND2
   50 CX(M,K) = D0
      DO 51 K = 1, ND2
      C(K) = D0
   51 DC(K) = D0
      DO 52 K = 1, 40
   52 CR(K+11) = D0
      Q(1)=D0
      RM(1)=D0
C	WRITE(6,*) ND2
C
C SUMMATION AND DIFFERENTIATION OF THE LEGENDRE SERIES, CF.REF(A),EQ.
C (49) AND (51).
      IF (LSUMC) N1 = N2
      K1 = N1
      K2 = N1+1
      K = N1-1
      DO 54 M = 1, N1
      GI = (D2*K+D1)*S/K1
      GJ = -K1*S2/K2
      K2 = K1
      K1 = K
      K = K-1
      IF (.NOT.LSUMC) SI = SIGMA(IS+K2)
      IF (LSUMC) SI = SM(K2)
      I2 = 0
      I1 = 1
      DO 53 I = 2, ND2
      B = DC(I)
      DC(I) = C(I)
      C(I) = GI*(DC(I)*T+I2*DC(I1))+GJ*B+SI
C	  WRITE(6,*) C(I),GI,DC(I),T,I2,DC(I1),GJ,B,SI
      SI = D0
      I2 = I1
   53 I1 = I
   54 CONTINUE
      IF (LSUMC) N1 = N3
C
      IF (LSUMC) GO TO 75
C
C COMPUTATION OF THE FUNCTIONS L=R(1), N=1/RN, M=RM(2), F0=P(2), CF.
C REF.(A), EQ. (31)-(33),(40) AND (77A).
      RL2 = D1-D2*ST+S2
      RL =  SQRT(RL2)
      R(1) = RL
      RL1 = D1/RL
      RN = D1/(D1+RL-ST)
      RL2 = D1/RL2
      RNL = RN*RL1
      RM(2) = D1-RL-ST
      P(2) = S*DLOG(D2*RN)
      RL3 = RL2*RL1
      RL5 = RL3*RL2
      S3 = S2*S
      R(2) = -S*RL1
      IF (ND.EQ.0) GO TO 56
C
C COMPUTATION OF THE DERIVATIVES WITH RESPECT TO T.
C CF. REF.(A), EQ. (77B),(69A),(57).
      R(3) = -S2*RL3
      RM(3) = -R(2)-S
      P(3) = S2*(RNL+RN)
      IF (ND.EQ.1) GO TO 56
C
C CF. REF.(A), EQ. (77C),(69B),(58).
      R(4) = -D3*S3*RL5
      RM(4) = -R(3)
      P(4) = S3*(RL3+(D1+(D2+RL1)*RL1)*RN)*RN
      IF (ND.EQ.2) GO TO 56
C
C CF. REF.(A), EQ. (77D),(69C),(59).
      RL4 = RL2*RL2
      RL7 = RL5*RL2
      S4 = S2*S2
      R(5) = -15.0E0*S4*RL7
      RM(5) = -R(4)
      P(5) = S4*(D3*RL5+((D3+D3*RL1)*RL3+D2*(D1+(D3+(D3+RL1)*RL1)*RL1)
     **RN)*RN)*RN
      IF (ND.EQ.3) GO TO 56
C
C CF. REF.(A), EQ. (69D),(60).
      S5 = S4*S
      RL6 = RL4*RL2
      RM(6) = -R(5)
      P(6) = D3*S5*((D5*RL7+((D4+D5*RL1)*RL5+((D4+(8.0E0
     *+D4*RL1)*RL1)*RL3+(D2+(8.0E0+(12.0E0+(8.0E0+D2*RL1)*RL1)
     **RL1)*RL1)*RN)*RN)*RN)*RN)
C
   56 IF (LN(2)) GO TO 58
C COMPUTATION OF THE FUNCTION F-1 AND ITS DERIVATIVES, CF. REF.(A),
C EQ. (41) AND (61) - (65).
      U(2) = S*(RM(2)+T*P(2))
      IF (ND2.LT.3) GO TO 58
      DO 57 K = 3, ND2
   57 U(K) = S*(RM(K)+T*P(K)+(K-2)*P(K-1))
C
   58 IF (LN(1)) GO TO 60
C COMPUTATION OF THE FUNCTION F-2 AND ITS DERIVATIVES, CF. REF.(A) EQ.
C (42), AND (65)- (68).
      DO 59 K = 2, ND2
      GO TO (61,61,62,63,64,65),K
   61 CY = S*(D1-T2)/4.0E0
      GO TO 59
   62 CY = -ST/D2
      GO TO 59
   63 CY = D3*P(2)-S/D2
      GO TO 59
   64 CY = 9.0E0*P(3)
      GO TO 59
   65 CY = 18.0E0*P(4)
   59 V(K) = S*(RM(K)*P3+S*((K-2)*D3*RM(K-1)/D2+P2*P(K)+D3*T*P(K-1)*
     *(K-2)+CY))
C
   60 IF (LN(3)) GO TO 73
C COMPUTATION OF THE FUNCTION F1 AND ITS DERIVATIVES, CF. REF.(A) EQ.
C (36), REF.(B), EQ.(101) AND REF.(A), EQ.(70),(71).
      Q(2) = DLOG(D1+D2*S/(D1-S+RL))
      IF (ND.EQ.0) GO TO 66
      Q(3) = S2*RNL
      IF (ND.EQ.1) GO TO 66
      Q(4) = S3*((RL1+D1)*RN+RL2)*RNL
      IF (ND.EQ.2) GO TO 66
      Q(5) = S4*(D3*RL4+((D2+D3*RL1)*RL2+(D2 +(D4+D2*RL1)*RL1)*RN)
     **RN)*RNL
      IF (ND.EQ.3) GO TO 66
      Q(6) = D3*S5*(D5*RL6+((D3+D5*RL1)*RL4+((D2+(6.0E0+D4*RL1)
     **RL1)*RL2+(D2+(6.0E0+(6.0E0+D2*RL1)*RL1)*RL1)*RN)*RN)*RN)*RNL
C
C COMPUTATION OF THE FUNCTION F2 AND ITS DERIVATIVES, CF. REF.(A), EQ.
C (3),(72)-(75).
   66 P(2) = (RL-D1+T*Q(2))/S
      IF (ND.EQ.0) GO TO 68
      DO 67  K = 3, ND2
   67 P(K) = (R(K-1)+T*Q(K)+(K-2)*Q(K-1))/S
   68 I1 = II-1
      K1 = 1
      J1 = I1
      IF (I1.GE.2) GO TO 149
      DO 49 M = 2, ND2
      IF (I1.EQ.0) G(M) = Q(M)
      IF (I1.EQ.1) G(M) = P(M)
   49 CONTINUE
  149 IF (L(4)) J1 = JJ-1
      IF (J1.LE.1) GO TO 73
C
C CF. REF.(A), EQ. (38),(76).
      DO 71  K = 2, J1
      DO 69  M = 2, ND2
      B = Q(M)
      Q(M) = P(M)
   69 P(M) = (R(M-1)+(2*K-1)*((M-2)*Q(M-1)+T*Q(M))-K1/S*B)/(K*S)
      IF (K.NE.I1) GO TO 71
      DO 70 M = 2, ND2
   70 G(M) = P(M)
   71 K1 = K
C
   73 IF (LN(6)) GO TO 72
C CF. REF.(A), EQ. (34),(55).
      SS1(2) = S2*(T-S)*RL3
      IF (ND.GT.0) SS1(3) = S2*(RL3+D3*(T-S)*S*RL5)
C
C CF. REF.(A), EQ. (35).
   72 IF (L(7)) SS2= S2*((T+S)*RL3+D3*S*(T2-D1)*RL5)
C
C ADDING THE DIFFERENT TERMS, CF. REF.(A), EQ. (22),(47).
C TIPLIED BY RB**2 IN UNITS OF MGAL**2, THE INTEGERS K(2),K(3) OF EQ.
   75 DO 79 M = 2, ND2
C CF. REF.(A), EQ. (50),(52).
      C(M) = S*C(M)
      CR(M*8 -4) = C(M)
      DO 78 K = 1, 7
      IF (LN(K)) GO TO 78
C STORING THE TERMS FOR TRANSFER TO THE CALLING PROGRAM USING THE COMMON
C AREA /CMCOV/.
      CR(M*8+K -4) = A*CX(M,K+1)*CI(K)
      IF (K.EQ.5) CR(M*8+K-4) = -CR(M*8+K-4)
      C(M) = C(M)+CR(M*8+K -4)
   78 CONTINUE
   79 CR(M+50)=C(M)
C
C INTEGERS SPECIFYING THE KINDS OF DIFFERENTIATION WITH RESPECT TO THE
C LATITUDES AND/OR THE LONGITUDES, CF. REF.(A), SECTION 3.
  204 I = KI(10)
      J = KI(12)
      K = KI(11)
      M = KI(13)
      J1 = KI(14)
      M1 = KI(15)
      IF (.NOT.(LOLDP.OR.LOLDQ)) GO TO 110
C
      IJ = I+J
      IF (I.GT.3) IJ = 5
      KM = K+M
      IF (K.GT.3) KM = 5
C
C COMPUTATION OF THE DERIVATIVES OF ORDER ND WITH RESPECT TO THE LATI-
C TUDES AND THE LONGITUDES, CF. REF.(A), EQ. (43) - (46).
      GO TO (80,81,82,83,84),ND1
   80 COV = C(2)
      GO TO 85
   81 COV = -C(3)*D(I+6*(K-1))
      GO TO 85
   82 COV = D(I)*D(J1)*D(6*(K-1)+1)*D(6*(M1-1)+1)*C(4)+D(IJ+6*(KM-1))
     **C(3)
      GO TO 85
   83 COV = (-D(IJ+6*(KM-1))*C(3)+(D(IJ)*D(6*(KM-1)+1)+D(I+6*(K-1))
     **D(J1+6*(M1-1))+D(I+6*(M1-1))*D(J1+6*(K-1)))*C(4)
     *+D(I)*D(J1)*D(6*(K-1)+1)*D(6*(M1-1)+1)*C(5))
      GO TO 85
   84 COV  = D(IJ+6*(KM-1))*C(3)+(D(IJ+6*(K-1))*D(6*(M-1)+1)
     *+D(I+6*(KM-1))*D(J)+D(J+6*(KM-1))*D(I)+D(IJ+6*(M-1))
     **D((K-1)*6+1)+D(IJ)*D(6*(KM-1)+1)+D(I+6*(K-1))*D(J+6*(M-1))
     *+D(I+6*(M-1))*D(J+6*(K-1)))*C(4)+(D(IJ)*D(6*(K-1)+1)*D(6*(M-1)+1)
     *+D(I+6*(K-1))*D(J)*D(6*(M-1)+1)+D(I+6*(M-1))*D(J)*D(6*(K-1)+1)
     *+D(J+6*(K-1))*D(I)*D(6*(M-1)+1)+D(J+6*(M-1))*D(I)*D(6*(K-1)+1)
     *+D(6*(KM-1)+1)*D(I)*D(J))*C(5)+D(I)*D(J)*D(6*(K-1)+1)*D(6*(M-1)
     *+1)*C(6)
C
C GIVING THE COVARIANCE THE PROPER UNITS.
   85 COV = COV*CI(12)
C
      GO TO 199
  110 CF=CI(12)
      IF (KI(6).EQ.13) CF=CF/D2
      IF (KI(7).EQ.13) CF=CF/D2
      DO 111 IX = 2, ND2
  111 CZ(IX-1) = C(IX)*CF
      CV(1,2) = D0
      CV(2,1) = D0
      CV(2,2) = D0
      GO TO (112, 113, 114, 115, 115), ND1
  112 CV(1,1) = CZ(1)
C  ================================================================
       KZ=1
      GO TO 198
  113 IF (I.EQ.1) GO TO 116
      CV(1,1) = CZ(2)*D(3)
      CV(2,1) = CZ(2)*D(2)
C  ================================================================
       KZ=2
      GO TO 198
  116 CV(1,1) = CZ(2)*D(13)
      CV(1,2) = CZ(2)*D(7)
C  ================================================================
       KZ=3
      GO TO 198
  114 IF (I.GT.1) GO TO 117
      CV(1,2) = CZ(3)*D(19)*D(31)
      CV(1,1) = CZ(3)*D(7)*D(13)*D2
C  =================================================================
      KZ=4
      GO TO 198
  117 IF (K.GT.1) GO TO 118
      CV(2,1) = CZ(3)*D(4)*D(6)
      CV(1,1) = CZ(3)*D(2)*D(3)*D2
C  =================================================================
      KZ=5
      GO TO 198
  118 CV(1,1) = CZ(2)*D(15)+CZ(3)*D(13)*D(3)
      CV(2,2) = CZ(2)*D(8) +CZ(3)*D(2)*D(7)
      CV(1,2) = CZ(2)*D(9) +CZ(3)*D(3)*D(7)
      CV(2,1) = CZ(2)*D(14)+CZ(3)*D(13)*D(2)
C  =================================================================
      KZ=6
C FIRST ORDER HORIZONTAL DERIVATIVES IN BOTH P AND Q.
      GO TO 198
  115 CONTINUE
C
      IIX=2
      DO 119 IX = 1, 2
      IIY=2
      DO 120 JX = 1, 2
      IF (ND.EQ.4) GO TO 121
C SECOND ORDER HORIZONTAL DERIVATIVE IN P OR Q.
      IX1=IX
      JX1=JX
      IF (KI(6) .GE. 12) GO TO 122
      CF = JX
      JX1=IIY
      I = J2(IX)
      J1 = 1
      K = I4(JX)
      M1 = I3(JX)
      GO TO 123
  122 CF = IX
      IX1=IIX
      I = I4(IX)
      J1 = I3(IX)
      K = J2(JX)
      M1 = 1
  123 K6 = 6*(K-1)
      M6 = 6*(M1-1)
      CV(IX1,JX1) = (CZ(3)*(D(I+K6)*D(J1+M6)+D(J1+K6)*D(I+M6))
     * +CZ(4)*D(I)*D(J1)*D(K6+1)*D(M6+1))*CF
C  =================================================================
      KZ=7
      GO TO 120
  121 I = I4(IX)
      J = I3(IX)
      K = I4(JX)
      M = I3(JX)
      K6 = 6*(K-1)
      M6 = 6*(M-1)
      CV(IIX,IIY) = (CZ(3)*(D(I+K6)*D(J+M6)+D(I+M6)*D(J+K6))
     *  +CZ(4)*(D(J)*(D(I+K6)*D(M6+1)+D(I+M6)*D(K6+1))
     *        +D(I)*(D(J+K6)*D(M6+1)+D(J+M6)*D(K6+1)))
     *  +CZ(5)*D(I)*D(J)*D(K6+1)*D(M6+1))*IX*JX
C ==================================================================
      KZ=8
  120 IIY=1
  119 IIX=1
  198 COV = CV(KI(24),KI(25))
C ==================================================================
      IF (LTEST)WRITE(6,7788) KZ,I,J,K,M,CV(1,1),CV(1,2),CV(2,1),
     *CV(2,2)
 7788 FORMAT(/'  KZ,   I,   J,   K,   M,   CV(1,1),   CV(1,2), ',
     *' CV(2,1)   CV(2,2)'/1X,5I4,4F10.4)
  199 RETURN
      END
      FUNCTION VAR(SM,IS,KP,DRM,AAI,HP,IMAX1,LMEAN)
C PROGRAMMED FEB 1985 BY C.C.TSCHERNING. UPDATE: 21 NOV 1986.
C THE FUNCTION COMPUTES THE VARIANCE OF A SIGNAL QUANTITY OF TYPE
C KP USING COVBX AND COVCX.
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE THE FOLLOWING STATEMENT:
      IMPLICIT REAL*8 (A-H,O-Z),LOGICAL (L)
      LOGICAL LT,LF,LSUM,LOCAL,LMEAN
      COMMON /CMCOV/CI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *D(40),KI(37),N1,N2,LOCAL,LSUM
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RADSEC,PI,GM,LF,LT
      DIMENSION SM(3)
C
      CI(8) = AAI
      CI(9) = (RE+DRM)**2
      CI(10)= DRM
      CI(20)= D1
      N1 = IMAX1
      KI(6) = KP
      KI(7) = KP
      RP = RE+HP
      CALL COVBX(SM,CVV,IS)
      CR(1) = D1
      CR(2) = HP
      CR(3) = HP
      CR(4) = D0
      CR(5) = D0
      CR(6) = D1
      CR(7) = D1
      CR(8) = D0
      CR(9) = D1
      CR(10)= GM/(RP*RP)
      CR(11) = CR(10)
      IF (.NOT.LMEAN) CALL COVCX(SM,CVV,IS)
      IF (LMEAN) CVV=COMEAN(SM,IS,0,D1,D0,D1,D0,D1,D0,D1,D0,5,5,LF)
      VAR = CVV
      RETURN
      END
      FUNCTION COVCG(SM,IP,LTEST)
C
COMMENT GI REG.NO.81025, PROGRAMMED BY C.C.TSCHERNING, SEPT. 81.
C FORTRAN VERSION JUNE 1985, LATES UPDATE JAN 1987 BY CCT.
C
C FUNCTION:
C THE PROCEDURE WILL FIND IN CTA (1) THE COEFFICIENTS OF A BICUBIC
C POLYNOMIUM REPRESENTING A COVARIANCE FUNCTION IN A RECTANGLE
C WITH CORNER COORDINATES (CTSF(I), CTTF(J)) (LOWER, LEFTMOST)
C (CTSF(I+1), CTTF(J+1)) (UPPER, RIGHTMOST), IN A COORDINATE
C SYSTEM WITH S1 AS ABSCISSA AND T1 AS ORDINATE, (2) COMPUTE
C THE COVARIANCE FOR A POINT WITHIN THE RECTANGLE.
C
C HERE S1=1-S, S=RB**2/(RP*RQ), T1=1-T=1-COS(SPHERICAL DIST.),
C WHERE RB IS THE RADIUS OF THE BJERHAMMAR-SPHERE, RP, RQ ARE
C THE RADIAL DISTANCES OF TWO POINTS P AND Q, SEE THE PROCEDURE
C COVCX.
C
C THE COEFFICIENTS ARE STORED IN THE ARRAY A. IN MAXB ARE
C CURRENT VALUES OF I AND J STORED, TOGETHER WITH AN INTEGER K
C INDICATING WHICH TYPE OF COVARIANCE FUNCTION IS STORED (COVA-
C RIANCE(T, T) FOR K=0 AND COV(DELTA G, DELTA G) FOR K=3).
C THIS MAKES THE RECOLLECTION OF THE ELEMENTS OF A UNNECESSARY
C IF THE PROCEDURE IS CALLED IN ORDER TO COMPUTE VALUES WITHIN
C THE SAME RECTANGLE ANOTHER TIME.
C
C IF THE COVARIANCES NEEDED FOR THE INTERPOLATION HAVE NOT BEEN
C TABULATED (IN THE ARRAY CT), THEN COVCX WILL BE CALLED.
C
C PARAMETERS:
C SEE COVCX, COVBX, CTABLE FOR KI, CI, SIGMA, CR, CT AND D.
C A  (DIMENSION, BOUNDS (18)), HOLDS THE COEFFICIENTS (1-16),
C _   AND SIDE LENGTHS IN A(17), A(18).
C
C EXTNAL PROCEDURES USED: COVCX, BSFC.
C
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT REAL *8(A-H,O-Z), LOGICAL (L)
C AND USE DSIN, DABS, DCOS BELOW.
      LOGICAL LFAST,LTEST,LCBI,LT,LSUM,LOCAL,LF
      COMMON /CMCOV/CI(24),CR(56),SIGMA0(1200),SIGMA(1200),HMAX,
     *CVV(2,2),D(36),KI(37),N1,N2,LOCAL,LSUM
      COMMON /DCON/D0,D1,D2,D3,D4,D5,RE,RG,PI,GM,LF,LT
      COMMON /CCVCG/KK(24)
C ELEMENTS OF KK ARE INITIALIZED BY BLOCK DATA ROUTINE.
      COMMON /TABELC/CTA(400,16,2),CTTF(200),CTSF(20),SZ(30),A(18),
     *MAXB(20),IX(8),IC,IT,IT1,IS,IS1,IZ,IZ1,IZ2,IZ3,IM,IM1,IM2,IM3,
     *IM4,IM5,IM6,II,IOLD
      DIMENSION SM(3)
C
      IF (IOLD.EQ.IP) GO TO 10
      IP4=IP*4
      IC=IX(1+IP4)
      IT=IX(2+IP4)
      IT1=IT+1
      IS=IX(3+IP4)
      IS1=IS+1
      IZ=IP*3
      IZ1=IZ+1
      IZ2=IZ+2
      IZ3=IZ+3
      IM=IP*6
      IM1=IM+1
      IM2=IM+2
      IM3=IM+3
      IM4=IM+4
      IM5=IM+5
      IM6=IM+6
      II=IX(4+IP4)
      IOLD=IP
      MAXB(IM6)=-1
C THIS ASSIGNMENT OF -1 IS DONE TO ASSURE THAT BILDEC IS CALLED WHEN A
C A NEW COVARIANCE FUNCTION TABEL IS USED.
C
   10 R5=1.0E5
      DB=-CI(10)
      NS=IABS(MAXB(IM1))
      NT=MAXB(IM2)
      NT1=MAXB(IM3)
      NS1=NS+1
C
      SP= CR(4)
      SQ= CR(5)
      CP= CR(6)
      CQ= CR(7)
C
      SS= SP*SQ
      CD=CR(9)
      T= CR(1)
      T1=D1-T
      HP= CR(2)
      HQ= CR(3)
C
      RP= RE+HP
      RQ= RE+HQ
      S= CI(9)/(RP*RQ)
      S1= D1-S
C
      IF (KI(6).EQ.0.OR.KI(7).EQ.0) GO TO 90
      KP=KK(KI(6))
      KQ=KK(KI(7))
      LFAST=(T1.LE.CTTF(NT1+IT)).AND.(S1.GE.CTSF(IS1)).AND.(S1.LE.
     *CTSF(NS1+IS)).AND.(KP.LT.5).AND.(KQ.LT.5).AND.KI(8).LT.2
      IF (.NOT.LFAST) GO TO 90
C
      IF ( ABS(HP-HQ) .GE. 1.0E-5) GO TO 11
      IF ( ABS(HP) .LT. 1.0E-5) S1=DB*(D2-DB/RE)/RE
      IF ( ABS(HP).LT.1.0E-5) S1= (HP+DB)*(2*RE+HP-DB)/RP**2
      GO TO 12
   11 S1= (RE*(2*DB+HP+HQ)+HP*HQ-DB*DB)/(RP*RQ)
   12 S= D1-S1
C
COMMENT FIND INDEX FOR LOWER LEFT CORNER
      I=0
   14 I=I+1
      IF (CTSF(I+IS1) .LT. S1) GO TO 14
      J=0
      IF (.NOT.LTEST) GO TO 19
   13 J=J+1
      IF (CTTF(J+IT1) .LT. T1) GO TO 13
   19 NT0=NT1-1
      JJ=J
      J=1
      IF (T1.LE.D0) GO TO 22
      IF (T1.LT.CTTF(NT0+IT)) GO TO 23
      J=NT0
      GO TO 22
   23 J=NT0/2+1
      JD=NT0
   24 JD=JD/2
      IF (JD.LT.1) JD=1
      IF (T1.GE.CTTF(J+IT)) GO TO 25
      J=J-JD
      GO TO 24
   25 IF (T1.LT.CTTF(J+IT1)) GO TO 22
      J=J+JD
      GO TO 24
   22 IF (J.NE.JJ.AND.LTEST) WRITE(6,98)J,JJ
   98 FORMAT(' J,JJ=',2I4)
      S0= CTSF(I+IS)
      T0= CTTF(J)
C
      DS= S1-S0
      DT=T1-T0
C
      IF (LTEST) WRITE(6,100)I,J,T1,S1
  100 FORMAT(' I,J,T1,S1=',2I4,2F9.6)
      NDT=0
      IF (KP.GT.2) NDT=1
      IF (KQ.GT.2) NDT=NDT+1
      NDS=0
      IF (KP.EQ.2)NDS=1
      IF (KQ.EQ.2)NDS=NDS+1
      IF (NDS.NE.2) GO TO 15
      NDS= 0
      K= 3
      GO TO 16
   15 K=-1
C
   16 IF (I.EQ.MAXB(IM4).AND.J.EQ.MAXB(IM5).AND.K.EQ.MAXB(IM6)) GO TO 18
      MAXB(IM4)=I
      MAXB(IM5)=J
      MAXB(IM6)=K
      KA=1
      IF (K.EQ.3)KA=2
      I2=IC+(I-1)*NT1+J
      DO 20 J0=1,16
   20 A(J0)=CTA(I2,J0,KA)
C
      S1=CTSF(I+IS1)-S0
      T1=CTTF(J+IT1)-T0
      A(17)=S1
      A(18)=T1
      KI(37)= KI(37)+1
      GO TO 21
C
   18 KI(36)= KI(36)+1
C
   21 S1=A(17)
      T1=A(18)
      DS=DS/S1
      DT= DT/T1
C
      IF (LTEST) WRITE(6,102)(A(I0),I0=1,16)
  102 FORMAT(' A=',4E13.5,3(/,3X,4E13.5))
C
      C=D0
      DCT=D0
      IF (NDS.EQ.0) GO TO 29
      IF (NDT.GT.0) GO TO 28
C
C COVARIANCE GRAVITY AND HEIGHT ANOMALY.
      C=BSFC(A,0,0,DS,DT)
      DCS= S*BSFC(A, 1, 0, DS, DT)
      C= -(DCS+D2*C)
      CR(52)=C
      GO TO 31
C
C COVARIANCE GRAVITY ANOMALY WITH DEFLECTIONS.
   28 DCT= BSFC(A, 0, 1, DS, DT)
      DCST= S*BSFC(A, 1, 1, DS, DT)
      DCT= DCST+2*DCT
      CR(53)=DCT
      GO TO 31
C
   29 IF (NDT.GT.0) GO TO 30
C AUTOCOVARIANCE OF GRAVITY OR OF HEIGHT ANOMALY.
      C=BSFC(A,0,0,DS,DT)
      CR(52)=C
      GO TO 31
C
C CROSS-COVARIANCE HEIGHT ANOMALY WITH DEFLECTIONS.
   30 DCT=-BSFC(A,0,1,DS,DT)
      CR(53)=DCT
   31 CONTINUE
C
      IF (NDT.EQ.0) GO TO 40
      SD= CR(8)
      CS= CP*SQ
      SC= SP*CQ
      SCC= SC*CD
      CSC= CS*CD
      D(3)=CQ*SD
      D(13)= -CP*SD
      D(2)= CS-SCC
      D(7)= SC-CSC
C
   40 IF (LTEST) WRITE(6,110)C,RP,RQ,CI(11),CR(10),CR(11)
  110 FORMAT(' C,RP,RQ,CI11,GP,GQ=',/,
     *E13.6,2F9.1,E13.6,2F9.6)
C
      CF=CI(11)/(RP**KI(22)*RQ**KI(23)*CR(10)**KI(20)
     **CR(11)**KI(21))
      CI(12)=CF
      C=C*CF
      DCT=DCT*CF
      IF (NDT.GT.0) GO TO 71
      CVV(1,1)=C
      GO TO 72
   71 IF (KP.GT.2) GO TO 73
C COVARIANCE WITH DEFLECTION IN Q AND HEIGHT OR GRAVITY ANOMALY IN P.
      CVV(1,1)= DCT*D(13)
      CVV(1,2)= DCT*D(7)
      GO TO 72
C COVARIANCE WITH DEFLECTION IN P AND HEIGHT OR GRAVITY ANOMALY IN Q.
   73 CVV(1,1)=DCT*D(3)
      CVV(2,1)=DCT*D(2)
   72 COVCG=CVV(KI(24),KI(25))
C
      GO TO 99
   90 CALL COVCX(SM,COV,II)
      COVCG=COV
      KI(35)= KI(35)+1
C
   99 RETURN
      END

      FUNCTION POL(I,A,T)
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(18)
      P=A(I+12)
      K=2
      DO 10 J=1,3
      P=P*T+A(I+4*K)
   10 K=K-1
      POL=P
      RETURN
      END
      FUNCTION DPOL(I,A,T2,T32)
C PROGRAMMED JUNE 1985 BY C.C.TSCHERNING. COMPUTES FIRST ORDER
C DERIVATIVE OF POLYNOMIAL USED IN BSFC.
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT REAL *8(A-H,O-Z)
      DIMENSION A(18)
      DPOL=A(I)+T2*(A(I+4)+T32*A(I+8))
      RETURN
      END
      FUNCTION BSFC(A,IS,IT,S,T)
C
COMMENT GI REG.NO.81021, PROGRAMMED BY C.C.TSCHERNING, SEP. 1981.
C FORTRAN VERSION JUNE 1985.
C
C REF.: SUENKEL, HANS: A COVARIANCE APPROXIMATION PROCEDURE,
C OSU REP. NO. 286, 1979, P. 42.
C
C FUNCTION:
C CALCULATION OF ZERO TO SECOND ORDER DERIVATIVES OF A
C BICUBIC POLYNOMIAL.
C
C PARAMETERS:
C  IS   (CALL VALUE, INTEGER) ORDER OF DERIVATIVE IN S,
C  IT   ( -     -  ,    -   )   -           -        T,
C  S    ( -     -  , REAL) NORMALIZED COORDINATE OF THE POINT,
C  T    ( -     -  ,   - )     -         -                -  ,
C  A    ( -     -  , DIMENSION) COEFFICIENTS OF THE POLYNOMIAL, E.G.
C                  AS PRODUCED BY BILDEC IN A(1) - A(16).
C                  A(17), A(18) HOLDS GRID SIZE IN S AND T.
C
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT REAL *8 (A-H,O-Z), LOGICAL (L)
      DIMENSION A(18)
      T2= 2.0E0*T
      T32= T*1.5
      DS= A(17)
      DT= A(18)
C
      IT1=IT+1
      IS1=IS+1
      GO TO (10,11,12),IT1
   10 B= POL(4,A,T)
C
      GO TO (20,21,22),IS1
C
   20 I = 3
      DO 30 I1 = 1,3
      B = POL(I,A,T)+B*S
   30 I = I-1
      GO TO 99
C
   21 B= POL(3,A,T)+B*S*1.5E0
      B= (POL(2,A,T)+B*S*2.0E0)/DS
      GO TO 99
C
   22 B= (POL(3,A,T)+B*S*3.0E0)*2.0E0/(DS*DT)
      GO TO 99
C
   11 B= DPOL(8,A,T2,T32)
C
      GO TO (31,32,33),IS1
C
   31 I = 7
      DO 34 I1 = 1, 3
      B = DPOL(I,A,T2,T32)+B*S
   34 I = I-1
      B= B/DT
      GO TO 99
C
   32 B= DPOL(7,A,T2,T32)+B*S*1.5E0
      B= DPOL(6,A,T2,T32)+B*S*2.0E0
      B= B/(DT*DS)
      GO TO 99
C
   33 B= DPOL(7,A,T2,T32)+B*S*3.0E0
      B= B*2.0E0/(DS*DS*DT)
      GO TO 99
C
   12 B= A(13)+S*(A(14)+S*(A(15)+S*A(16)))
      B= A(9)+S*(A(10)+S*(A(11)+S*A(12)))+B*T*3.0E0
      B= B*2.0E0/(DS*DT)
C
   99 BSFC= B
      RETURN
      END
